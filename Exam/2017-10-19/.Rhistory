gridPoints <- data.frame(gridPoints)
names(gridPoints) <- names(subset(train, select=c("varWave", "skewWave")))
probPreds <- predict(model, gridPoints, type="probabilities")
# Plotting for Prob(Fraud)
contour(x1,x2,matrix(probPreds[,1],100,byrow = TRUE), 20, xlab = "varWave", ylab = "skewWave", main = 'Prob(Fraud) - Fraud is red')
points(train[train[,5]==1,1],train[train[,5]==1,2],col="red")
points(train[train[,5]==0,1],train[train[,5]==0,2],col="blue")
# Confusion matrix and accuracy
print("The confusion matrix is as follow:")
confusionMatrix
print("... and the accuracy is the following:")
sum(diag(confusionMatrix))/sum(confusionMatrix)
model = gausspr(fraud ~ varWave+skewWave, data=train)
predictedTrain = predict(model, newdata=train)
confusionMatrix = table(predictedTrain, train[,5]) # confusion matrix
# class probabilities
probPreds <- predict(model, train, type="probabilities")
x1 <- seq(min(train$varWave),max(train$varWave),length=100)
x2 <- seq(min(train$skewWave),max(train$skewWave),length=100)
gridPoints <- meshgrid(x1, x2)
gridPoints <- cbind(c(gridPoints$x), c(gridPoints$y))
gridPoints <- data.frame(gridPoints)
names(gridPoints) <- names(subset(train, select=c("varWave", "skewWave")))
probPreds <- predict(model, gridPoints, type="probabilities")
# Plotting for Prob(Fraud)
contour(x1,x2,matrix(probPreds[,1],100,byrow = TRUE), 20, xlab = "varWave", ylab = "skewWave", main = 'Prob(Fraud) - Fraud is red')
points(train[train[,5]==1,1],train[train[,5]==1,2],col="red")
points(train[train[,5]==0,1],train[train[,5]==0,2],col="blue")
# Confusion matrix and accuracy
print("The confusion matrix is as follow:")
confusionMatrix
print("... and the accuracy is the following:")
sum(diag(confusionMatrix))/sum(confusionMatrix)
predictedTest = predict(model, newdata=test)
confusionMatrix_test = table(predictedTest, test[,5])
print("The accuracy for the test set is as follows:")
sum(diag(confusionMatrix_test))/sum(confusionMatrix_test)
## 3) Train a model using all four covariates. Make predictions on the test set and compare the accuracy to the model with only two
## covariates
model2 = gausspr(fraud ~., data=train)
predictedTest2 = predict(model2, newdata=test)
confusionMatrix_test2 = table(predictedTest2, test[,5])
sum(diag(confusionMatrix_test2))/sum(confusionMatrix_test2)
model2 = gausspr(fraud ~., data=train)
predictedTest2 = predict(model2, newdata=test)
confusionMatrix_test2 = table(predictedTest2, test[,5])
print("The confusion matrix is as follow:")
confusionMatrix_test2
print("... and the accuracy is the following:")
sum(diag(confusionMatrix_test2))/sum(confusionMatrix_test2)
postMean*scale_var+scale_mean
predictedMean
source('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Lab4/Lab4_Assignment1.R', echo=TRUE)
posteriorSim2$var
sqrt(diag(posteriorSim2$var))
library(kernlab)
help("gausspr")
source('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Lab4/Lab4_Assignment2.R', echo=TRUE)
View(model)
source('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Lab4/Lab4_Assignment1.R', echo=TRUE)
points(x, y)
points(x, y)
x=c(-1, -0.6, -0.2, 0.4, 0.8)
y=c(0.768, -0.044, -0.940, 0.719, -0.664)
obs2=data.frame(x=x, y=y)
posteriorSim2=posteriorGP(obs2$x, obs2$y, xTest, sigmaN, SquaredExpKernel, sigmaF, l)
plot(xTest, posteriorSim2$mean, type="l",
ylim=c(min(posteriorSim2$mean-1.96*sqrt(diag(posteriorSim2$var))), max(posteriorSim2$mean+1.96*sqrt(diag(posteriorSim2$var)))),
col="red", main="Plot of posterior mean (red) with 95 % probability bands", xlab="x", ylab="Posterior mean",
sub="Five observations as prior")
lines(xTest, posteriorSim2$mean - 1.96*sqrt(diag(posteriorSim2$var)), col = "gray", lwd = 2, lty=21)
lines(xTest, posteriorSim2$mean + 1.96*sqrt(diag(posteriorSim2$var)), col = "gray", lwd = 2, lty=21)
points(x, y)
# Plotting one draw
obs=data.frame(x=0.4, y=0.719)
sigmaF <- 1
sigmaN=0.1
l <- 0.3
posteriorSim=posteriorGP(obs$x, obs$y, xTest, sigmaN, SquaredExpKernel, sigmaF, l)
plot(xTest, posteriorSim$mean, type="l",
ylim=c(min(posteriorSim$mean - 1.96*sqrt(diag(posteriorSim$var))), max(posteriorSim$mean + 1.96*sqrt(diag(posteriorSim$var)))),
col="red", main="Plot of posterior mean (red) with 95 % probability bands", xlab="x", ylab="Posterior mean",
sub="One observation as prior")
lines(xTest, posteriorSim$mean - 1.96*sqrt(diag(posteriorSim$var)), col = "gray", lwd = 2, lty=21)
lines(xTest, posteriorSim$mean + 1.96*sqrt(diag(posteriorSim$var)), col = "gray", lwd = 2, lty=21)
points(obs$x, obs$y)
x=c(0.4, -0.6)
y=c(0.719, -0.044)
obs2=data.frame(x=x, y=y)
posteriorSim2=posteriorGP(obs2$x, obs2$y, xTest, sigmaN, SquaredExpKernel, sigmaF, l)
plot(xTest, posteriorSim2$mean, type="l",
ylim=c(min(posteriorSim2$mean-1.96*sqrt(diag(posteriorSim2$var))), max(posteriorSim2$mean+1.96*sqrt(diag(posteriorSim2$var)))),
col="red", main="Plot of posterior mean (red) with 95 % probability bands", xlab="x", ylab="Posterior mean",
sub="Two observations as prior")
lines(xTest, posteriorSim2$mean - 1.96*sqrt(diag(posteriorSim2$var)), col = "gray", lwd = 2, lty=21)
lines(xTest, posteriorSim2$mean + 1.96*sqrt(diag(posteriorSim2$var)), col = "gray", lwd = 2, lty=21)
points(x, y)
x=c(-1, -0.6, -0.2, 0.4, 0.8)
y=c(0.768, -0.044, -0.940, 0.719, -0.664)
obs2=data.frame(x=x, y=y)
posteriorSim2=posteriorGP(obs2$x, obs2$y, xTest, sigmaN, SquaredExpKernel, sigmaF, l)
plot(xTest, posteriorSim2$mean, type="l",
ylim=c(min(posteriorSim2$mean-1.96*sqrt(diag(posteriorSim2$var))), max(posteriorSim2$mean+1.96*sqrt(diag(posteriorSim2$var)))),
col="red", main="Plot of posterior mean (red) with 95 % probability bands", xlab="x", ylab="Posterior mean",
sub="Five observations as prior")
lines(xTest, posteriorSim2$mean - 1.96*sqrt(diag(posteriorSim2$var)), col = "gray", lwd = 2, lty=21)
lines(xTest, posteriorSim2$mean + 1.96*sqrt(diag(posteriorSim2$var)), col = "gray", lwd = 2, lty=21)
points(x, y)
sigmaF=1
l=1
posteriorSim2=posteriorGP(obs2$x, obs2$y, xTest, sigmaN, SquaredExpKernel, sigmaF, l)
plot(xTest, posteriorSim2$mean, type="l",
ylim=c(min(posteriorSim2$mean-1.96*sqrt(diag(posteriorSim2$var))), max(posteriorSim2$mean+1.96*sqrt(diag(posteriorSim2$var)))),
col="red", main="Plot of posterior mean (red) with 95 % probability bands", xlab="x", ylab="Posterior mean",
sub=expression(paste("Five observations as prior and ", sigma[F], "=1 and l=1")))
lines(xTest, posteriorSim2$mean - 1.96*sqrt(diag(posteriorSim2$var)), col = "gray", lwd = 2, lty=21)
lines(xTest, posteriorSim2$mean + 1.96*sqrt(diag(posteriorSim2$var)), col = "gray", lwd = 2, lty=21)
points(x, y)
source('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Lab4/Lab4_Assignment2.R', echo=TRUE)
plot(time, temp, type="p", main="Time vs temperature")
lines(time, predictedMean, type="l", lwd=2, xlab="Time", ylab="Temp", col="red")
lines(time, postMean*scale_var+scale_mean+1.96*(sqrt(diag(postVar))*scale_var), lwd=2, lty=2, col="blue")
lines(time, postMean*scale_var+scale_mean-1.96*(sqrt(diag(postVar))*scale_var), lwd=2, lty=2, col="blue")
posterior = posteriorGP(scale(time), scale(temp), time, sigmaN, SquaredExpKernel, sigmaF, l)
postVar = posterior$var
postMean = posterior$mean
plot(time, temp, type="p", main="Time vs temperature")
lines(time, predictedMean, type="l", lwd=2, xlab="Time", ylab="Temp", col="red")
lines(time, postMean*scale_var+scale_mean+1.96*(sqrt(diag(postVar))*scale_var), lwd=2, lty=2, col="blue")
lines(time, postMean*scale_var+scale_mean-1.96*(sqrt(diag(postVar))*scale_var), lwd=2, lty=2, col="blue")
legend("bottomright", legend=c("Data", "Predicted mean", "95% probability bands"), pch=c(1, NA, NA), lty=c(NA, 1, 2),
lwd=c(NA, 2, 2), col=c("black", "red", "blue"))
sigmaF=20
posterior = posteriorGP(scale(time), scale(temp), scale(time), sigmaN, SquaredExpKernel, sigmaF, l)
postVar = posterior$var
postMean = posterior$mean
plot(time, temp, type="p", main="Time vs temperature")
lines(time, predictedMean, type="l", lwd=2, xlab="Time", ylab="Temp", col="red")
lines(time, postMean*scale_var+scale_mean+1.96*(sqrt(diag(postVar))*scale_var), lwd=2, lty=2, col="blue")
lines(time, postMean*scale_var+scale_mean-1.96*(sqrt(diag(postVar))*scale_var), lwd=2, lty=2, col="blue")
plot(time, temp, type="p", main="Time vs temperature")
lines(time, predictedMean, type="l", lwd=2, xlab="Time", ylab="Temp", col="red")
lines(time, postMean*scale_var+scale_mean+1.96*(sqrt(diag(postVar))*sqrt(scale_var)), lwd=2, lty=2, col="blue")
lines(time, postMean*scale_var+scale_mean-1.96*(sqrt(diag(postVar))*sqrt(scale_var)), lwd=2, lty=2, col="blue")
lines(time, postMean*scale_var+scale_mean-1.96*(sqrt(diag(postVar))*scale_var, lwd=2, lty=2, col="blue")
lines(time, predictedMean, type="l", lwd=2, xlab="Time", ylab="Temp", col="red")
lines(time, postMean*scale_var+scale_mean+1.96*(sqrt(diag(postVar))*scale_var), lwd=2, lty=2, col="blue")
lines(time, postMean*scale_var+scale_mean-1.96*(sqrt(diag(postVar))*scale_var), lwd=2, lty=2, col="blue")
plot(time, temp, type="p", main="Time vs temperature")
lines(time, predictedMean, type="l", lwd=2, xlab="Time", ylab="Temp", col="red")
lines(time, postMean*scale_var+scale_mean+1.96*(sqrt(diag(postVar))*scale_var), lwd=2, lty=2, col="blue")
lines(time, postMean*scale_var+scale_mean-1.96*(sqrt(diag(postVar))*scale_var), lwd=2, lty=2, col="blue")
temp=data$temp[id]
fit = lm(scale(temp) ~ scale(time)+scale(time)^2)
sigmaN=sd(fit$residuals)
sigmaF=20
l=0.2
SEkernel = NestedSquaredExpKernel(sigmaF, l)
model = gausspr(time, temp, kernel=SEkernel, var=sigmaN^2)
predictedMean=predict(model, newdata=time)
plot(time, temp, type="p", main="Time vs temperature")
lines(time, predictedMean, type="l", lwd=2, xlab="Time", ylab="Temp", col="red")
legend("bottomright", legend=c("Data", "Predicted mean"), pch=c(1, NA), lty=c(NA, 1), lwd=c(NA, 2), col=c("black", "red"))
# Function for returning the posterior mean and variance of a given dataset (gaussian process regression)
posteriorGP = function(X, y, XStar, sigmaNoise, k, ...) {
n = length(X)
K=k(X, X, ...)
kStar=k(X,XStar, ...)
L = t(chol(K + sigmaNoise^2*diag(n)))
alpha=solve(t(L),solve(L, y))
predMean=t(kStar)%*%alpha
v=solve(L, kStar)
predVar=k(XStar, XStar, ...)-t(v)%*%v
return(list(mean=predMean, var=predVar))
}
# Storing mean and var so that the data can be rescaled to original size at later stage
scale_mean=mean(temp)
scale_var=sqrt(var(temp))
posterior = posteriorGP(scale(time), scale(temp), scale(time), sigmaN, SquaredExpKernel, sigmaF, l)
postVar = posterior$var
postMean = posterior$mean
plot(time, temp, type="p", main="Time vs temperature")
lines(time, predictedMean, type="l", lwd=2, xlab="Time", ylab="Temp", col="red")
lines(time, postMean*scale_var+scale_mean+1.96*(sqrt(diag(postVar))*scale_var), lwd=2, lty=2, col="blue")
lines(time, postMean*scale_var+scale_mean-1.96*(sqrt(diag(postVar))*scale_var), lwd=2, lty=2, col="blue")
legend("bottomright", legend=c("Data", "Predicted mean", "95% probability bands"), pch=c(1, NA, NA), lty=c(NA, 1, 2),
lwd=c(NA, 2, 2), col=c("black", "red", "blue"))
library(bnlearn)
library(gRain)
library(RBGL)
library(bnlearn)
library(gRain)
install.packages("gRain")
library(gRain)
source('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Lab1/Lab1.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Lab1/Lab1.R', echo=TRUE)
library(bnlearn)
library(gRain)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("RBGL")
library(bnlearn)
library(gRain)
BiocManager::install("Rgraphviz")
BiocManager::install("gRain")
BiocManager::install("RBGL")
library(bnlearn)
library(gRain)
library(RBGL)
library(Rgraphviz)
help(rbfdot)
source('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Exam/2017-10-19/2017-10-19_Assignment3.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Exam/2017-10-19/2017-10-19_Assignment3.R', echo=TRUE)
fSim
# Plotting one draw
sigmaF <- 1
lVec=c(0.2,1)
nSim <- 5
for (i in lVec) {
fSim <- SimGP(m=0, K=SquaredExpKernel, x=xGrid, nSim, sigmaF, i)
plot(xGrid, fSim[1,], type="l", ylim = c(-3,3))
if(nSim>1){
for (i in 2:nSim) {
lines(xGrid, fSim[i,], type="l")
}
}
}
# Plotting one draw
sigmaF <- 1
lVec=c(0.2,1)
nSim <- 5
for (i in lVec) {
fSim <- SimGP(m=0, K=SquaredExpKernel, x=xGrid, nSim, sigmaF, i)
plot(xGrid, fSim[1,], type="l", ylim = c(-3,3), main="Realizations of prior distribution", sub=expression(paste(l, "=", i)))
if(nSim>1){
for (i in 2:nSim) {
lines(xGrid, fSim[i,], type="l")
}
}
}
# Plotting one draw
sigmaF <- 1
lVec=c(0.2,1)
nSim <- 5
for (i in lVec) {
fSim <- SimGP(m=0, K=SquaredExpKernel, x=xGrid, nSim, sigmaF, i)
plot(xGrid, fSim[1,], type="l", ylim = c(-3,3), main="Realizations of prior distribution", sub=paste("l=", i))
if(nSim>1){
for (i in 2:nSim) {
lines(xGrid, fSim[i,], type="l")
}
}
}
# Plotting one draw
sigmaF <- 1
lVec=c(0.2,1)
nSim <- 5
for (i in lVec) {
fSim <- SimGP(m=0, K=SquaredExpKernel, x=xGrid, nSim, sigmaF, i)
plot(xGrid, fSim[1,], type="l", ylim = c(-3,3), main="Realizations of prior distribution", sub=paste("l =", i))
if(nSim>1){
for (i in 2:nSim) {
lines(xGrid, fSim[i,], type="l")
}
}
}
# Plotting one draw
sigmaF <- 1
lVec=c(0.2,1)
nSim <- 5
for (i in lVec) {
fSim <- SimGP(m=0, K=SquaredExpKernel, x=xGrid, nSim, sigmaF, i)
plot(xGrid, fSim[1,], type="l", ylim = c(-3,3), main="Realizations of prior distribution", sub=paste("l =", i),
ylab="f")
if(nSim>1){
for (i in 2:nSim) {
lines(xGrid, fSim[i,], type="l")
}
}
}
corrVec=matrix(0,2,2)
corrMatrix=matrix(0,2,2)
corrMatrix=matrix(0,2,2)
rownames(corrMatrix)=c("l=0.2", l="1")
colnames(corrMatrix)=c("Corr(f(0),f(0.1))", "Corr(f(0),f(0.5))")
View(corrMatrix)
corrMatrix=matrix(0,2,2)
rownames(corrMatrix)=c("l=0.2", "l=1")
colnames(corrMatrix)=c("Corr(f(0),f(0.1))", "Corr(f(0),f(0.5))")
View(corrMatrix)
View(fSim)
source('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Exam/2017-10-19/2017-10-19_Assignment3.R', echo=TRUE)
View(corrMatrix)
source('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Exam/2017-10-19/2017-10-19_Assignment3.R', echo=TRUE)
View(corrMatrix)
source('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Exam/2017-10-19/2017-10-19_Assignment3.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Exam/2017-10-19/2017-10-19_Assignment3.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Exam/2017-10-19/2017-10-19_Assignment3.R', echo=TRUE)
View(corrMatrix)
source('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Exam/2017-10-19/2017-10-19_Assignment3.R', echo=TRUE)
View(corrMatrix)
source('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Exam/2017-10-19/2017-10-19_Assignment3.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Exam/2017-10-19/2017-10-19_Assignment3.R', echo=TRUE)
View(corrMatrix)
source('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Exam/2017-10-19/2017-10-19_Assignment3.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Exam/2017-10-19/2017-10-19_Assignment3.R', echo=TRUE)
View(corrMatrix)
source('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Exam/2017-10-19/2017-10-19_Assignment3.R', echo=TRUE)
View(corrMatrix)
source('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Exam/2017-10-19/2017-10-19_Assignment3.R', echo=TRUE)
View(corrMatrix)
source('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Exam/2017-10-19/2017-10-19_Assignment3.R', echo=TRUE)
View(corrMatrix)
SquaredExpKernel(0,0,1,l=0.1)
SquaredExpKernel(0,0.1,l=0.1)
SquaredExpKernel(0,0.5,l=0.1)
source('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Exam/2017-10-19/2017-10-19_Assignment3.R', echo=TRUE)
View(corrMatrix)
SquaredExpKernel(0,0.5,l=0.2)
SquaredExpKernel(0,0.1,l=0.2)
SquaredExpKernel(0,0.1,l=1)
SquaredExpKernel(0,0.5,l=1)
View(corrMatrix)
View(corrMatrix)
SquaredExpKernel(0,0.5,l=1)
SquaredExpKernel(0,0.5,l=0.2)
SquaredExpKernel(0,0.1,l=1)
SquaredExpKernel(0,0.1,l=0.2)
source('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Exam/2017-10-19/2017-10-19_Assignment3.R', echo=TRUE)
View(corrMatrix)
View(corrMatrix)
View(corrMatrix)
source('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Exam/2017-10-19/2017-10-19_Assignment3.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Exam/2017-10-19/2017-10-19_Assignment3.R', echo=TRUE)
View(corrMatrix)
corrMatrix
# This is just to test how one evaluates a kernel function
# and how one computes the covariance matrix from a kernel function.
X <- matrix(rnorm(12), 4, 3) # Simulating some data.
Xstar <- matrix(rnorm(15), 5, 3)
ell <- 1
SEkernel <- rbfdot(sigma = 1/(2*ell^2)) # Note how I reparametrize the rbfdot (which is the SE kernel) in kernlab.
SEkernel(1,2) # Just a test - evaluating the kernel in the points x=1 and x'=2.
# Computing the whole covariance matrix K from the kernel. Just a test.
kernelMatrix(kernel = SEkernel, x = X, y = Xstar) # So this is K(X,Xstar).
setwd("~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Exam/2017-10-19")
load("GPdata.RData")
source('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Exam/2017-10-19/2017-10-19_Assignment3.R', echo=TRUE)
data=load("GPdata.RData")
load("GPData.RData")
source('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Exam/2017-10-19/2017-10-19_Assignment3.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Exam/2017-10-19/2017-10-19_Assignment3.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Exam/2017-10-19/2017-10-19_Assignment3.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Exam/2017-10-19/2017-10-19_Assignment3.R', echo=TRUE)
load("GPData.RData")
source('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Exam/2017-10-19/2017-10-19_Assignment3.R', echo=TRUE)
# This function is a nested function which returns an object of class kernel.
NestedSquaredExpKernel <- function(sigmaF=1,l=3){
EvaluExpKernel = function(x, xStar) {
n1 <- length(x)
n2 <- length(xStar)
K <- matrix(NA,n1,n2)
for (i in 1:n2){
K[,i] <- sigmaF^2*exp(-0.5*( (x-xStar[i])/l)^2 )
}
return(K)
}
class(EvaluExpKernel)='kernel'
return(EvaluExpKernel)
}
SEkernel1 <- NestedSquaredExpKernel(1, 0.2) # Note how I reparametrize the rbfdot (which is the SE kernel) in kernlab.
SEkernel2 <- NestedSquaredExpKernel(1, 1)
SEkernel1 <- NestedSquaredExpKernel(1, 0.2) # Note how I reparametrize the rbfdot (which is the SE kernel) in kernlab.
SEkernel2 <- NestedSquaredExpKernel(1, 1)
sigmaN=0.2
model = gausspr(x, y, kernel=SEkernel1, var=sigmaN^2)
model1 = gausspr(x, y, kernel=SEkernel1, var=sigmaN^2)
x
source('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Exam/2017-10-19/2017-10-19_Assignment3.R', echo=TRUE)
View(model)
predict(model)
predict(model, newdata=x)
help(predict)
help("predict.gausspr")
Kxx=kernelMatrix(SEkernel1, x, y)
Kxx
Kxx2=kernelMatrix(SEKernel2, x, y)
SEkernel1 <- NestedSquaredExpKernel(1, 0.2) # Note how I reparametrize the rbfdot (which is the SE kernel) in kernlab.
SEkernel2 <- NestedSquaredExpKernel(1, 1)
sigmaN=0.2
model1 = gausspr(x, y, kernel=SEkernel1, var=sigmaN^2)
predict1=predict(model1, newdata=x)
model2 = gausspr(x,y, kernel=SEKernel2, var=sigmaN^2)
predict2=predict(model2, newdata=x)
Kxx1=kernelMatrix(SEkernel1, x, y)
Kxx2=kernelMatrix(SEKernel2, x, y)
SEkernel1 <- NestedSquaredExpKernel(1, 0.2) # Note how I reparametrize the rbfdot (which is the SE kernel) in kernlab.
SEkernel2 <- NestedSquaredExpKernel(1, 1)
sigmaN=0.2
model1 = gausspr(x, y, kernel=SEkernel1, var=sigmaN^2)
SEKernel1 <- NestedSquaredExpKernel(1, 0.2) # Note how I reparametrize the rbfdot (which is the SE kernel) in kernlab.
SEKernel2 <- NestedSquaredExpKernel(1, 1)
sigmaN=0.2
model1 = gausspr(x, y, kernel=SEKernel1, var=sigmaN^2)
predict1=predict(model1, newdata=x)
model2 = gausspr(x,y, kernel=SEKernel2, var=sigmaN^2)
predict2=predict(model2, newdata=x)
Kxx1=kernelMatrix(SEkernel1, x, y)
Kxx2=kernelMatrix(SEKernel2, x, y)
source('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Exam/2017-10-19/2017-10-19_Assignment3.R', echo=TRUE)
help(solve)
cov1=Kxx1-Kxx1%*%solve(Kxx1+diag(sigmaN^2), 1)%*%Kxx1
cov1=Kxx1-t(Kxx1)%*%solve(Kxx1+diag(sigmaN^2), 1)%*%Kxx1
source('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Exam/2017-10-19/2017-10-19_Assignment3.R', echo=TRUE)
n=length(x)
cov1=Kxx1-t(Kxx1)%*%solve(Kxx1+sigmaN^2*diag(n)), 1)%*%Kxx1
source('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Exam/2017-10-19/2017-10-19_Assignment3.R', echo=TRUE)
cov1=Kxx1-Kxx1%*%solve(Kxx1+sigmaN^2*diag(n), 1)%*%Kxx1
cov1=Kxx1-Kxx1%*%solve(Kxx1+sigmaN^2*diag(n), diag(n))%*%Kxx1
View(cov1)
cov2=Kxx1-t(Kxx1)%*%solve(Kxx1+sigmaN^2*diag(n), Kxx1)
cov1=Kxx1-t(Kxx1)%*%solve(Kxx1+sigmaN^2*diag(n), diag(n))%*%Kxx1
cov2=Kxx1-t(Kxx1)%*%solve(Kxx1+sigmaN^2*diag(n), Kxx1)
cov2=Kxx2-Kxx2%*%solve(Kxx2+sigmaN^2*diag(n), Kxx2) # since X and XStar the same
plot(x, predict1)
plot(x, y, main="Plot of data with posterior mean, prob. bands and pred.bands")
plot(x, y, main="Plot of data with posterior mean, prob. bands and pred.bands", sub="l=0.2")
lines(x, predict1, lwd=2, col="red")
lines(sort(x), predict1, lwd=2, col="red")
lines(sort(x), sort(predict1), lwd=2, col="red")
plot(x, y, main="Plot of data with posterior mean, prob. bands and pred.bands", sub="l=0.2")
lines(sort(x), sort(predict1), lwd=2, col="red")
load("GPData.RData")
data=data.frame(x=x, y=y)
help(order)
data=data.frame(x=x, y=y)
View(data)
data=data[order(data$x)]
data=data[order(data$x),]
View(data)
data=data.frame(x=x, y=y)
View(data)
load("GPData.RData")
data=data.frame(x=x, y=y)
data=data[order(data$x),]
# This function is a nested function which returns an object of class kernel.
NestedSquaredExpKernel <- function(sigmaF=1,l=3){
EvaluExpKernel = function(x, xStar) {
n1 <- length(x)
n2 <- length(xStar)
K <- matrix(NA,n1,n2)
for (i in 1:n2){
K[,i] <- sigmaF^2*exp(-0.5*( (x-xStar[i])/l)^2 )
}
return(K)
}
class(EvaluExpKernel)='kernel'
return(EvaluExpKernel)
}
SEKernel1 <- NestedSquaredExpKernel(1, 0.2) # Note how I reparametrize the rbfdot (which is the SE kernel) in kernlab.
SEKernel2 <- NestedSquaredExpKernel(1, 1)
sigmaN=0.2
model1 = gausspr(x, y, kernel=SEKernel1, var=sigmaN^2)
predict1=predict(model1, newdata=x)
model2 = gausspr(x,y, kernel=SEKernel2, var=sigmaN^2)
predict2=predict(model2, newdata=x)
Kxx1=kernelMatrix(SEKernel1, x, x)
Kxx2=kernelMatrix(SEKernel2, x, x)
n=length(x)
cov1=Kxx1-Kxx1%*%solve(Kxx1+sigmaN^2*diag(n), Kxx1) # since X and XStar the same
cov2=Kxx2-Kxx2%*%solve(Kxx2+sigmaN^2*diag(n), Kxx2) # since X and XStar the same
plot(x, y, main="Plot of data with posterior mean, prob. bands and pred.bands", sub="l=0.2")
lines(x, predict1, lwd=2, col="red")
source('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Exam/2017-10-19/2017-10-19_Assignment3.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Exam/2017-10-19/2017-10-19_Assignment3.R', echo=TRUE)
SEKernel1 <- NestedSquaredExpKernel(1, 0.2) # Note how I reparametrize the rbfdot (which is the SE kernel) in kernlab.
SEKernel2 <- NestedSquaredExpKernel(1, 1)
source('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Exam/2017-10-19/2017-10-19_Assignment3.R', echo=TRUE)
lines(x, predict1+sqrt(diag(cov1)), lty=21, col="gray")
lines(x, predict1+sqrt(diag(cov1)), lty=2, col="gray")
plot(x, y, main="Plot of data with posterior mean, prob. bands and pred.bands", sub="l=0.2")
lines(x, predict1, lwd=2, col="red")
lines(x, predict1+sqrt(diag(cov1)), lwd=2, lty=21, col="gray")
plot(x, y, main="Plot of data with posterior mean, prob. bands and pred.bands", sub="l=0.2")
lines(x, predict1, lwd=2, col="red")
lines(x, predict1+1.96*sqrt(diag(cov1)), lwd=2, lty=21, col="gray")
lines(x, predict1-1.96*sqrt(diag(cov1)), lwd=2, lty=21, col="gray")
lines(x, predict1+1.96*sqrt(diag(cov1)+sigmaN^2*diag(n)), lwd=2, lty=21, col="blue")
lines(x, predict1+1.96*sqrt(diag(cov1)+sigmaN^2), lwd=2, lty=21, col="blue")
lines(x, predict1-1.96*sqrt(diag(cov1)+sigmaN^2), lwd=2, lty=21, col="blue")
legend("bottomright", legend=c("Data", "Posterior mean", "95 % prob. bands", "95 % pred. bands"))
legend("bottomright", legend=c("Data", "Posterior mean", "95 % prob. bands", "95 % pred. bands"), pty=c(1,0,0,0),
lwd=c(NaN, 2,2,2), lty=c(NaN, 1, 21, 21), col=c("black", "red", "gray", "blue"))
legend("bottomright", legend=c("Data", "Posterior mean", "95 % prob. bands", "95 % pred. bands"), pch=c(1,0,0,0),
lwd=c(NaN, 2,2,2), lty=c(NaN, 1, 21, 21), col=c("black", "red", "gray", "blue"))
plot(x, y, main="Plot of data with posterior mean, prob. bands and pred.bands", sub="l=0.2")
lines(x, predict1, lwd=2, col="red")
lines(x, predict1+1.96*sqrt(diag(cov1)), lwd=2, lty=21, col="gray")
lines(x, predict1-1.96*sqrt(diag(cov1)), lwd=2, lty=21, col="gray")
lines(x, predict1+1.96*sqrt(diag(cov1)+sigmaN^2), lwd=2, lty=21, col="blue")
lines(x, predict1-1.96*sqrt(diag(cov1)+sigmaN^2), lwd=2, lty=21, col="blue")
legend("bottomright", legend=c("Data", "Posterior mean", "95 % prob. bands", "95 % pred. bands"), pch=c(1,NaN, NaN, NaN),
lwd=c(NaN, 2,2,2), lty=c(NaN, 1, 21, 21), col=c("black", "red", "gray", "blue"))
plot(x, y, main="Plot of data with posterior mean, prob. bands and pred.bands", sub="l=1")
lines(x, predict2, lwd=2, col="red")
lines(x, predict2+1.96*sqrt(diag(cov2)), lwd=2, lty=21, col="gray")
lines(x, predict2-1.96*sqrt(diag(cov2)), lwd=2, lty=21, col="gray")
lines(x, predict2+1.96*sqrt(diag(cov2)+sigmaN^2), lwd=2, lty=21, col="blue")
lines(x, predict2-1.96*sqrt(diag(cov2)+sigmaN^2), lwd=2, lty=21, col="blue")
legend("bottomright", legend=c("Data", "Posterior mean", "95 % prob. bands", "95 % pred. bands"), pch=c(1,NaN, NaN, NaN),
lwd=c(NaN, 2,2,2), lty=c(NaN, 1, 21, 21), col=c("black", "red", "gray", "blue"))
mean(data$x)
