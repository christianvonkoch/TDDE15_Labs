confusionMatrix = table(predictedValid, valid[,5])
print(confusionMatrix)
print(sum(diag(confusionMatrix))/sum(confusionMatrix))
return(sum(diag(confusionMatrix))/sum(confusionMatrix))
}
optimParam = optim(par=100, fn=accuracy, lower= c(.Machine$double.eps), method="L-BFGS-B", control=list(fnscale=-1))
accuracy = function(par) {
model = gausspr(fraud ~., data=train, kernel="rbfdot", kpar=list(sigma=par))
predictedValid = predict(model, newdata=valid)
confusionMatrix = table(predictedValid, valid[,5])
print(confusionMatrix)
print(sum(diag(confusionMatrix))/sum(confusionMatrix))
return(sum(diag(confusionMatrix))/sum(confusionMatrix))
}
optimParam = optim(par=100, fn=accuracy, lower= c(.Machine$double.eps), method="L-BFGS-B", control=list(fnscale=-1))
optimParam$par
data <- read.csv("https://github.com/STIMALiU/AdvMLCourse/raw/master/
GaussianProcess/Code/banknoteFraud.csv", header=FALSE, sep=",")
names(data) <- c("varWave","skewWave","kurtWave","entropyWave","fraud")
data[,5] <- as.factor(data[,5])
set.seed(111)
SelectTraining <- sample(1:dim(data)[1], size = 1000, replace = FALSE)
traintemp=data[SelectTraining,]
test=data[-SelectTraining,]
SelectValid=sample(1:1000, size=200, replace=FALSE)
train=traintemp[-SelectValid,]
valid=traintemp[SelectValid,]
View(data)
names(data) <- c("varWave","skewWave","kurtWave","entropyWave","fraud")
data[,5] <- as.factor(data[,5])
set.seed(111)
SelectTraining <- sample(1:dim(data)[1], size = 1000, replace = FALSE)
traintemp=data[SelectTraining,]
test=data[-SelectTraining,]
SelectValid=sample(1:1000, size=200, replace=FALSE)
train=traintemp[-SelectValid,]
valid=traintemp[SelectValid,]
accuracy = function(par) {
model = gausspr(fraud ~., data=train, kernel="rbfdot", kpar=list(sigma=par))
predictedValid = predict(model, newdata=valid)
confusionMatrix = table(predictedValid, valid[,5])
print(confusionMatrix)
print(sum(diag(confusionMatrix))/sum(confusionMatrix))
return(sum(diag(confusionMatrix))/sum(confusionMatrix))
}
View(valid)
help(gausspr)
accuracy = function(par) {
model = gausspr(x=train[,1:4], y=train[,5], kernel="rbfdot", kpar=list(sigma=par))
predictedValid = predict(model, newdata=valid)
confusionMatrix = table(predictedValid, valid[,5])
print(confusionMatrix)
print(sum(diag(confusionMatrix))/sum(confusionMatrix))
return(sum(diag(confusionMatrix))/sum(confusionMatrix))
}
optimParam = optim(par=100, fn=accuracy, lower= c(.Machine$double.eps), method="L-BFGS-B", control=list(fnscale=-1))
accuracy = function(par) {
model = gausspr(x=train[,1:4], y=train[,5], kernel="rbfdot", kpar=list(sigma=par))
predictedValid = predict(model, newdata=valid)
confusionMatrix = table(predictedValid, valid[,5])
print(confusionMatrix)
print(sum(diag(confusionMatrix))/sum(confusionMatrix))
return(sum(diag(confusionMatrix))/sum(confusionMatrix))
}
optimParam = optim(par=100, fn=accuracy, lower= c(.Machine$double.eps), method="L-BFGS-B", control=list(fnscale=-1))
accuracy = function(par) {
model = gausspr(x=train[,1:4], y=train[,5], kernel="rbfdot", kpar=list(sigma=par[1]))
predictedValid = predict(model, newdata=valid)
confusionMatrix = table(predictedValid, valid[,5])
print(confusionMatrix)
print(sum(diag(confusionMatrix))/sum(confusionMatrix))
return(sum(diag(confusionMatrix))/sum(confusionMatrix))
}
optimParam = optim(par=c(100), fn=accuracy, lower= c(.Machine$double.eps), method="L-BFGS-B", control=list(fnscale=-1))
accuracy = function(par=c(0.1)) {
model = gausspr(x=train[,1:4], y=train[,5], kernel="rbfdot", kpar=list(sigma=par[1]))
predictedValid = predict(model, newdata=valid)
confusionMatrix = table(predictedValid, valid[,5])
print(confusionMatrix)
print(sum(diag(confusionMatrix))/sum(confusionMatrix))
return(sum(diag(confusionMatrix))/sum(confusionMatrix))
}
optimParam = optim(par=c(100), fn=accuracy, lower= c(.Machine$double.eps), method="L-BFGS-B", control=list(fnscale=-1))
train[,1:4]
accuracy = function(par=c(0.1)) {
model = gausspr(x=train[,1:4], y=train[,5], kernel="rbfdot", kpar=list(sigma=par[1]))
predictedValid = predict(model, newdata=valid[,5])
confusionMatrix = table(predictedValid, valid[,5])
print(confusionMatrix)
print(sum(diag(confusionMatrix))/sum(confusionMatrix))
return(sum(diag(confusionMatrix))/sum(confusionMatrix))
}
optimParam = optim(par=c(100), fn=accuracy, lower= c(.Machine$double.eps), method="L-BFGS-B", control=list(fnscale=-1))
data <- read.csv("https://github.com/STIMALiU/AdvMLCourse/raw/master/
GaussianProcess/Code/banknoteFraud.csv", header=FALSE, sep=",")
names(data) <- c("varWave","skewWave","kurtWave","entropyWave","fraud")
data[,5] <- as.factor(data[,5])
set.seed(111)
SelectTraining <- sample(1:dim(data)[1], size = 1000, replace = FALSE)
traintemp=data[SelectTraining,]
test=data[-SelectTraining,]
SelectValid=sample(1:1000, size=200, replace=FALSE)
train=traintemp[-SelectValid,]
valid=traintemp[SelectValid,]
accuracy = function(par=c(0.1)) {
model = gausspr(x=train[,1:4], y=train[,5], kernel="rbfdot", kpar=list(sigma=par[1]))
predictedValid = predict(model, newdata=valid[,5])
confusionMatrix = table(predictedValid, valid[,5])
print(confusionMatrix)
print(sum(diag(confusionMatrix))/sum(confusionMatrix))
return(sum(diag(confusionMatrix))/sum(confusionMatrix))
}
optimParam = optim(par=c(100), fn=accuracy, lower= c(.Machine$double.eps), method="L-BFGS-B", control=list(fnscale=-1))
accuracy = function(par=c(0.1)) {
model = gausspr(x=train[,1:4], y=train[,5], kernel="rbfdot", kpar=list(sigma=par[1]))
predictedValid = predict(model, newdata=valid[,1:4])
confusionMatrix = table(predictedValid, valid[,5])
print(confusionMatrix)
print(sum(diag(confusionMatrix))/sum(confusionMatrix))
return(sum(diag(confusionMatrix))/sum(confusionMatrix))
}
optimParam = optim(par=c(100), fn=accuracy, lower= c(.Machine$double.eps), method="L-BFGS-B", control=list(fnscale=-1))
optimParam = optim(par=c(100000), fn=accuracy, lower= c(.Machine$double.eps), method="L-BFGS-B", control=list(fnscale=-1))
optimParam = optim(par=c(0.1), fn=accuracy, lower= c(.Machine$double.eps), method="L-BFGS-B", control=list(fnscale=-1))
optimParam$par
data <- read.csv('https://github.com/STIMALiU/AdvMLCourse/raw/master/GaussianProcess/Code/banknoteFraud.csv', header=FALSE, sep=',')
names(data) <- c("varWave","skewWave","kurtWave","entropyWave","fraud")
data[,5] <- as.factor(data[,5])
set.seed(111); SelectTraining <- sample(1:dim(data)[1], size = 1000, replace = FALSE)
y <- data[,5]
X <- as.matrix(data[,1:4])
yTrain <- y[SelectTraining]
yTest <- y[-SelectTraining]
XTrain <- X[SelectTraining,]
XTest <- X[-SelectTraining,]
SelectVal <- sample(1:1000, size = 200, replace = FALSE) # 800 samples for training, 200 for validation, and the rest for test (optional)
yVal <- yTrain[SelectVal]
XVal <- XTrain[SelectVal,]
yTrain <- yTrain[-SelectVal]
XTrain <- XTrain[-SelectVal,]
acVal <- function(par=c(0.1)){ # Accuracy on the validation set
gausspr(x = XTrain[,selVars], y = yTrain, kernel = "rbfdot", kpar = list(sigma=par[1]))
predVal <- predict(GPfitFraud,XVal[,selVars])
table(predVal, yVal)
accuracyVal <-sum(predVal==yVal)/length(yVal)
return(accuracyVal)
}
selVars <- c(1,2,3,4)
GPfitFraud <- gausspr(x = XTrain[,selVars], y = yTrain, kernel = "rbfdot", kpar = 'automatic')
GPfitFraud
predVal <- predict(GPfitFraud,XVal[,selVars])
table(predVal, yVal)
accuracyVal <-sum(predVal==yVal)/length(yVal)
accuracyVal
bestVal<-accuracyVal # Grid search
for(j in seq(0.1,10,0.1)){
aux <- acVal(j)
if(bestVal<aux){
bestVal<-aux
bestj<-j
}
}
bestVal
bestj
gausspr(x = XTrain[,selVars], y = yTrain, kernel = "rbfdot", kpar = list(sigma=bestj)) # Accuracy on the test set (optional)
predTest <- predict(GPfitFraud,XTest[,selVars])
table(predTest, yTest)
sum(predTest==yTest)/length(yTest)
foo<-optim(par = c(0.1), fn = acVal, method="L-BFGS-B",
lower = c(.Machine$double.eps),control=list(fnscale=-1)) # Alternatively, one can use optim
acVal(foo$par)
foo$par
gausspr(x = XTrain[,selVars], y = yTrain, kernel = "rbfdot", kpar = list(sigma=foo$par)) # Accuracy on the test set (optional)
predTest <- predict(GPfitFraud,XTest[,selVars])
table(predTest, yTest)
library(bnlearn)
library(gRain)
library(RBGL)
library(Rgraphviz)
data("asia")
source('~/Documents/TDDE15/TDDE15_Labs/Exam/2016-10-20/2016-10-20_Assignment1.R', echo=TRUE)
hc(asia, restart=100, score="bic", iss=10)
library(bnlearn)
library(gRain)
library(RBGL)
library(Rgraphviz)
data("asia")
hc(asia, restart=100, score="bic", iss=10)
help(hc)
hc(asia, restart=100, score="bic")
plot(hc)
model = hc(asia, restart=100, score="bic")
pot(model)
plot(model)
help(pc)
plot(model)
fit=bn.fit(model, asia)
fitTable=as.grain(fit)
junctionTree=compile(fitTable)
plot(junctionTree)
View(asia)
evid=setEvidence(junctionTree, nodes=c("X", "B"), states=c("yes", "yes"))
querygrain(evid, nodes=c("A"))
plot(model)
fit=bn.fit(model, asia)
fitTable=as.grain(fit)
junctionTree=compile(fitTable)
evid=setEvidence(junctionTree, nodes=c("X", "B"), states=c("yes", "yes"))
querygrain(evid, nodes=c("A"))
help(prop.table)
# Approximate method
help(cpdist)
help(cpquery)
# Approximate method
table(cpdist(junctionTree, nodes=c("A"), evidence = (X=="yes" & B=="yes"))) # Alternatively, one can use approximate inference
# Approximate method
table(cpdist(fit, nodes=c("A"), evidence = (X=="yes" & B=="yes"))) # Alternatively, one can use approximate inference
# Approximate method
approx = table(cpdist(fit, nodes=c("A"), evidence = (X=="yes" & B=="yes")))
approx[1]/sum(approx)
graph=random.graph(c("A", "B", "C", "D", "E"), num=50000, method="melancon", every=50, burn.in=30000)
y=unique(graph)
help(markov)
help("moralize")
count=0
z=lapply(y, FUN=moralize)
for (i in 1:length(y)) {
if(all.equal(skeleton(y[[i]]), z[[i]]) == TRUE) {
count = count+1
}
}
z=lapply(y, FUN=moralize)
graph=random.graph(c("A", "B", "C", "D", "E"), num=50000, method="melancon", every=50, burn.in=30000)
y=unique(graph)
count=0
z=lapply(y, FUN=moralize)
View(y)
y[[1]]
for (i in 1:length(y)) {
if(all.equal(skeleton(y[[i]]), moralize(z[[i]])) == TRUE) {
count = count+1
}
}
count=0
for (i in 1:length(y)) {
if(all.equal(skeleton(y[[i]]), moralize(y[[i]])) == TRUE) {
count = count+1
}
}
help(moral)
count=0
for (i in 1:length(y)) {
if(all.equal(skeleton(y[[i]]), moral(y[[i]])) == TRUE) {
count = count+1
}
}
length(y)/count
graph=random.graph(c("A", "B", "C", "D", "E"), num=50000, method="melancon", every=50, burn.in=30000)
'y=unique(graph)
count=0
for (i in 1:length(y)) {
if(all.equal(skeleton(y[[i]]), moral(y[[i]])) == TRUE) {
count = count+1
}
}
length(y)/count
count
graph=random.graph(c("A", "B", "C", "D", "E"), num=50000, method="melancon", every=50, burn.in=30000)
y=unique(graph)
count=0
for (i in 1:length(y)) {
if(all.equal(skeleton(y[[i]]), moral(y[[i]])) == TRUE) {
count = count+1
}
}
length(y)/count
count
graph=random.graph(c("A", "B", "C", "D", "E"), num=50000, method="melancon", every=50, burn.in=30000)
y=unique(graph)
count=0
for (i in 1:length(y)) {
if(all.equal(skeleton(y[[i]]), moral(y[[i]])) == TRUE) {
count = count+1
}
}
length(y)/count
count
count/length(y)
transitionMatrix=diag(0.5, 5)
diag(transitionMatrix[,-1])=0.5
transitionMatrix[10,1]=0.5
emissionMatrix=matrix(0,10,10)
# A loop for defining the emission matrix properly
for(i in 1:10) {
for (j in 1:10) {
if((j+7-i) %% 10 >= 5) {
emissionMatrix[i,j]=0.2
} else {
emissionMatrix[i,j]=0
}
}
}
emissionMatrix
View(emissionMatrix)
View(emissionMatrix)
emissionMatrix=matrix(0,10,10)
# A loop for defining the emission matrix properly
for(i in 1:10) {
for (j in 1:10) {
if((j+9-i) %% 10 >= 7) {
emissionMatrix[i,j]=1/3
} else {
emissionMatrix[i,j]=0
}
}
}
emissionMatrix
emissionMatrix=matrix(0,10,10)
# A loop for defining the emission matrix properly
for(i in 1:10) {
for (j in 1:10) {
if((j+8-i) %% 10 >= 7) {
emissionMatrix[i,j]=1/3
} else {
emissionMatrix[i,j]=0
}
}
}
emissionMatrix
if((j+3-i) %% 5 >= 2) {
emissionMatrix[i,j]=1/3
} else {
emissionMatrix[i,j]=0
}
i
i
i
emissionMatrix=matrix(0,10,5)
# A loop for defining the emission matrix properly
for(i in 1:10) {
for (j in 1:5) {
if((j+3-i) %% 5 >= 2) {
emissionMatrix[i,j]=1/3
} else {
emissionMatrix[i,j]=0
}
}
}
emissionMatrix
emissionMatrix=matrix(0,10,5)
# A loop for defining the emission matrix properly
for(i in 1:10) {
for (j in 1:5) {
if((j+3-i) %% 5 >= 2) {
emissionMatrix[i,j]=1/3
} else {
emissionMatrix[i,j]=0
}
}
}
emissionMatrix
help(matrix)
set.seed(12345)
library(HMM)
library(entropy)
transitionMatrix=diag(0.5, 5)
diag(transitionMatrix[,-1])=0.5
transitionMatrix[10,1]=0.5
emissionVec=c(
1/3,1/3,0,0,1/3,
1/3,1/3,1/3,0,0,
0,1/3,1/3,1/3,0,
0,0,1/3,1/3,1/3,
1/3,0,0,1/3,1/3
)
emissionMatrix=matrix(emissionVec,10,5, byrow=TRUE)
emissionMatrix
states=1:10
symbols=1:5
HMM_model=initHMM(States=states, Symbols=symbols, transProbs=transitionMatrix, emissionProbs=emissionMatrix)
simHMM=simHMM(HMM_model, 100)
simHMM$observation
simHMM$states
transitionMatrix
set.seed(12345)
library(HMM)
library(entropy)
transitionMatrix=diag(0.5, 10)
diag(transitionMatrix[,-1])=0.5
transitionMatrix[10,1]=0.5
emissionVec=c(
1/3,1/3,0,0,1/3,
1/3,1/3,1/3,0,0,
0,1/3,1/3,1/3,0,
0,0,1/3,1/3,1/3,
1/3,0,0,1/3,1/3
)
emissionMatrix=matrix(emissionVec,10,5, byrow=TRUE)
emissionMatrix
states=1:10
symbols=1:5
transitionMatrix
HMM_model=initHMM(States=states, Symbols=symbols, transProbs=transitionMatrix, emissionProbs=emissionMatrix)
simHMM=simHMM(HMM_model, 100)
simHMM$observation
simHMM$states
library(HMM)
library(entropy)
library(entropy)
transitionVec=c(
0.75,0.25,0,0,
0,0,0.5,0.5,
0.5,0.5,0,0,
0,0,0.25,0.75
)
transitionMatrix=matrix(transitionVec, ncol=4, byrow=TRUE)
View(transitionMatrix)
emissionVec=c(
0.9,0.1,
0.1,0.9,
0.9,0.1,
0.1,0.9
)
transitionMatrix=matrix(transitionVec, ncol=4, byrow=TRUE)
emissionVec=c(
0.9,0.1,
0.1,0.9,
0.9,0.1,
0.1,0.9
)
emissionMatrix=matrix(emissionVec, ncol=2, byrow=TRUE)
View(emissionMatrix)
nameVec=c("SS", "SR", "RS", "RR")
transitionMatrix=matrix(transitionVec, ncol=4, byrow=TRUE)
rownames(transitionMatrix)=nameVec
colnames(transitionMatrix)=namevec
emissionVec=c(
0.9,0.1,
0.1,0.9,
0.9,0.1,
0.1,0.9
)
emissionMatrix=matrix(emissionVec, ncol=2, byrow=TRUE)
colnames(transitionMatrix)=nameVec
View(transitionMatrix)
colnames(emissionMatrix)=c("Works", "Malfunction")
rownames(emissionMatrix)=nameVec
states=nameVec
symbols=c("Works", "Malfunction")
HMM_model=initHMM(States=states, Symbols=symbols, transProbs=transitionMatrix, emissionProbs=emissionMatrix)
sim=simHMM(HMM_model, 10)
sim$observation
sim$states
library(HMM)
library(entropy)
transitionVec=c(
0.75,0.25,0,0,
0,0,0.5,0.5,
0.5,0.5,0,0,
0,0,0.25,0.75
)
nameVec=c("SS", "SR", "RS", "RR")
transitionMatrix=matrix(transitionVec, ncol=4, byrow=TRUE)
rownames(transitionMatrix)=nameVec
colnames(transitionMatrix)=nameVec
emissionVec=c(
0.9,0.1,
0.1,0.9,
0.9,0.1,
0.1,0.9
)
emissionMatrix=matrix(emissionVec, ncol=2, byrow=TRUE)
colnames(emissionMatrix)=c("Sunny", "Rainy")
rownames(emissionMatrix)=nameVec
states=nameVec
symbols=c("Works", "Malfunction")
HMM_model=initHMM(States=states, Symbols=symbols, transProbs=transitionMatrix, emissionProbs=emissionMatrix)
sim=simHMM(HMM_model, 10)
sim$observation
sim$states
library(HMM)
library(entropy)
transitionVec=c(
0.75,0.25,0,0,
0,0,0.5,0.5,
0.5,0.5,0,0,
0,0,0.25,0.75
)
nameVec=c("SS", "SR", "RS", "RR")
transitionMatrix=matrix(transitionVec, ncol=4, byrow=TRUE)
rownames(transitionMatrix)=nameVec
colnames(transitionMatrix)=nameVec
emissionVec=c(
0.9,0.1,
0.1,0.9,
0.9,0.1,
0.1,0.9
)
emissionMatrix=matrix(emissionVec, ncol=2, byrow=TRUE)
colnames(emissionMatrix)=c("Sunny", "Rainy")
rownames(emissionMatrix)=nameVec
states=nameVec
symbols=c("Sunny", "Rainy")
HMM_model=initHMM(States=states, Symbols=symbols, transProbs=transitionMatrix, emissionProbs=emissionMatrix)
sim=simHMM(HMM_model, 10)
sim$observation
sim$states
source('~/Documents/TDDE15/TDDE15_Labs/Exam/2017-10-19/2017-10-19_Assignment3.R', echo=TRUE)
source('~/Documents/TDDE15/TDDE15_Labs/Exam/2017-10-19/2017-10-19_Assignment3.R', echo=TRUE)
source('~/Documents/TDDE15/TDDE15_Labs/Exam/2017-10-19/2017-10-19_Assignment3.R', echo=TRUE)
setwd("~/Documents/TDDE15/TDDE15_Labs/Exam/2017-10-19")
source('~/Documents/TDDE15/TDDE15_Labs/Exam/2017-10-19/2017-10-19_Assignment3.R', echo=TRUE)
