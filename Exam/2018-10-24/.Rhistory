a = matrix(NA, nrow=dim(emissionMatrix)[1], ncol=timeSteps)
for (i in 1:noStates) {
a[i,1]=emissionMatrix[i, obs[i]]*startProbs[i]
}
return(a)
}
forwardAlgo(simulation, emissionMatrix, transitionMatrix, rep(0.1,10), 100)
forwardAlgo = function(simulation, emissionMatrix, transitionMatrix, startProbs, timeSteps) {
obs=simulation$observation
state=simulation$states
noStates=dim(emissionMatrix)[1]
a = matrix(NA, nrow=dim(emissionMatrix)[1], ncol=timeSteps)
for (i in 1:noStates) {
a[i,1]=emissionMatrix[i, obs[1]]*startProbs[i]
}
return(a)
}
forwardAlgo(simulation, emissionMatrix, transitionMatrix, rep(0.1,10), 100)
View(emissionMatrix)
simulation$states
View(emissionMatrix)
forwardAlgo = function(simulation, emissionMatrix, transitionMatrix, startProbs, timeSteps) {
obs=simulation$observation
state=simulation$states
noStates=dim(emissionMatrix)[1]
a = matrix(NA, nrow=dim(emissionMatrix)[1], ncol=timeSteps)
for (i in 1:noStates) {
a[i,1]=emissionMatrix[obs[1], i]*startProbs[i]
}
for (i in 2:2) {
a[,i] = emissionMatrix[,obs[i]]*sum(a[,i-1])*transitionMatrix[,obs[i]]
}
return(a)
}
forwardAlgo(simulation, emissionMatrix, transitionMatrix, rep(0.1,10), 100)
View(alpha)
transitionMatrix[,1]
forwardAlgo = function(simulation, emissionMatrix, transitionMatrix, startProbs, timeSteps) {
obs=simulation$observation
state=simulation$states
noStates=dim(emissionMatrix)[1]
a = matrix(NA, nrow=dim(emissionMatrix)[1], ncol=timeSteps)
for (i in 1:noStates) {
a[i,1]=emissionMatrix[obs[1], i]*startProbs[i]
}
for (i in 2:2) {
for (j in 1:noStates) {
a[j,i] = emissionMatrix[j,obs[i]]*sum(a[,i-1]*transitionMatrix[,j])
}
}
return(a)
}
forwardAlgo(simulation, emissionMatrix, transitionMatrix, rep(0.1,10), 100)
forwardAlgo(simulation, emissionMatrix, transitionMatrix, rep(0.1,10), 100)
forwardAlgo = function(simulation, emissionMatrix, transitionMatrix, startProbs, timeSteps) {
obs=simulation$observation
state=simulation$states
noStates=dim(emissionMatrix)[1]
a = matrix(NA, nrow=dim(emissionMatrix)[1], ncol=timeSteps)
for (i in 1:noStates) {
a[i,1]=emissionMatrix[obs[1], i]*startProbs[i]
}
for (i in 2:100) {
for (j in 1:noStates) {
a[j,i] = emissionMatrix[j,obs[i]]*sum(a[,i-1]*transitionMatrix[,j])
}
}
return(a)
}
forwardAlgo(simulation, emissionMatrix, transitionMatrix, rep(0.1,10), 100)
forwardAlgo = function(simulation, emissionMatrix, transitionMatrix, startProbs, timeSteps) {
obs=simulation$observation
state=simulation$states
noStates=dim(emissionMatrix)[1]
a = matrix(NA, nrow=dim(emissionMatrix)[1], ncol=timeSteps)
for (i in 1:noStates) {
a[i,1]=emissionMatrix[obs[1], i]*startProbs[i]
}
for (i in 2:100) {
for (j in 1:noStates) {
a[j,i] = emissionMatrix[j,obs[i]]*sum(a[,i-1]*transitionMatrix[,j])
}
}
return(a)
}
calcAlpha=forwardAlgo(simulation, emissionMatrix, transitionMatrix, rep(0.1,10), 100)
calcfiltered=calcFiltering(calcAlpha, 100)
mostProb_calcFiltered=apply(calcFiltered, 2, which.max)
calcAlpha=forwardAlgo(simulation, emissionMatrix, transitionMatrix, rep(0.1,10), 100)
calcFiltered=calcFiltering(calcAlpha, 100)
mostProb_calcFiltered=apply(calcFiltered, 2, which.max)
table(mostProb_calcFiltered==simulation$states)
source('~/SKOLA/LIU/Ã…k 5/TDDE15/TDDE15_Labs/Exam/2018-10-24/2018-10-24_Assignment2.R', echo=TRUE)
forwardAlgo = function(simulation, emissionMatrix, transitionMatrix, startProbs, timeSteps) {
obs=simulation$observation
state=simulation$states
noStates=dim(emissionMatrix)[1]
a = matrix(NA, nrow=dim(emissionMatrix)[1], ncol=timeSteps)
a[,1]=emissionMatrix[obs[1],]*startProbs[i]
for (i in 2:100) {
for (j in 1:noStates) {
a[j,i] = emissionMatrix[j,obs[i]]*sum(a[,i-1]*transitionMatrix[,j])
}
}
return(a)
}
calcAlpha=forwardAlgo(simulation, emissionMatrix, transitionMatrix, rep(0.1,10), 100)
calcFiltered=calcFiltering(calcAlpha, 100)
mostProb_calcFiltered=apply(calcFiltered, 2, which.max)
table(mostProb_calcFiltered==simulation$states)
forwardAlgo = function(simulation, emissionMatrix, transitionMatrix, startProbs, timeSteps) {
obs=simulation$observation
state=simulation$states
noStates=dim(emissionMatrix)[1]
a = matrix(NA, nrow=dim(emissionMatrix)[1], ncol=timeSteps)
a[,1]=emissionMatrix[obs[1],]*startProbs[i]
for (i in 2:100) {
for (j in 1:noStates) {
a[j,i] = emissionMatrix[obs[i],j]*sum(a[,i-1]*transitionMatrix[,j])
}
}
return(a)
}
calcAlpha=forwardAlgo(simulation, emissionMatrix, transitionMatrix, rep(0.1,10), 100)
calcFiltered=calcFiltering(calcAlpha, 100)
mostProb_calcFiltered=apply(calcFiltered, 2, which.max)
table(mostProb_calcFiltered==simulation$states)
View(emissionMatrix)
View(transitionMatrix)
forwardAlgo = function(simulation, emissionMatrix, transitionMatrix, startProbs, timeSteps) {
obs=simulation$observation
state=simulation$states
noStates=dim(emissionMatrix)[1]
a = matrix(NA, nrow=dim(emissionMatrix)[1], ncol=timeSteps)
a[,1]=emissionMatrix[obs[1],]*startProbs[i]
for (i in 2:100) {
for (j in 1:noStates) {
a[j,i] = emissionMatrix[obs[i],j]*sum(a[,i-1]*transitionMatrix[j,])
}
}
return(a)
}
calcAlpha=forwardAlgo(simulation, emissionMatrix, transitionMatrix, rep(0.1,10), 100)
calcFiltered=calcFiltering(calcAlpha, 100)
mostProb_calcFiltered=apply(calcFiltered, 2, which.max)
table(mostProb_calcFiltered==simulation$states)
View(alpha)
help(colsums)
help(colSums)
forwardAlgo = function(simulation, emissionMatrix, transitionMatrix, startProbs, timeSteps) {
obs=simulation$observation
state=simulation$states
noStates=dim(emissionMatrix)[1]
a = matrix(NA, nrow=dim(emissionMatrix)[1], ncol=timeSteps)
a[,1]=emissionMatrix[obs[1],]*startProbs[i]
for (i in 2:100) {
a[,i] = emissionMatrix[obs[i],]*rowSums(a[,i-1]*transitionMatrix)
}
return(a)
}
calcAlpha=forwardAlgo(simulation, emissionMatrix, transitionMatrix, rep(0.1,10), 100)
calcFiltered=calcFiltering(calcAlpha, 100)
mostProb_calcFiltered=apply(calcFiltered, 2, which.max)
table(mostProb_calcFiltered==simulation$states)
View(calcAlpha)
forwardAlgo = function(simulation, emissionMatrix, transitionMatrix, startProbs, timeSteps) {
obs=simulation$observation
state=simulation$states
noStates=dim(emissionMatrix)[1]
a = matrix(NA, nrow=dim(emissionMatrix)[1], ncol=timeSteps)
a[,1]=emissionMatrix[obs[1],]*startProbs[i]
for (i in 2:100) {
a[,i] = emissionMatrix[obs[i],]*rowSums(sum(a[,i-1])*transitionMatrix)
}
return(a)
}
calcAlpha=forwardAlgo(simulation, emissionMatrix, transitionMatrix, rep(0.1,10), 100)
calcFiltered=calcFiltering(calcAlpha, 100)
mostProb_calcFiltered=apply(calcFiltered, 2, which.max)
table(mostProb_calcFiltered==simulation$states)
forwardAlgo = function(simulation, emissionMatrix, transitionMatrix, startProbs, timeSteps) {
obs=simulation$observation
state=simulation$states
noStates=dim(emissionMatrix)[1]
a = matrix(NA, nrow=dim(emissionMatrix)[1], ncol=timeSteps)
a[,1]=emissionMatrix[obs[1],]*startProbs[i]
for (i in 2:100) {
a[,i] = emissionMatrix[obs[i],]*rowSums(sum(a[,i-1])*t(transitionMatrix))
}
return(a)
}
calcAlpha=forwardAlgo(simulation, emissionMatrix, transitionMatrix, rep(0.1,10), 100)
calcFiltered=calcFiltering(calcAlpha, 100)
mostProb_calcFiltered=apply(calcFiltered, 2, which.max)
table(mostProb_calcFiltered==simulation$states)
forwardAlgo = function(simulation, emissionMatrix, transitionMatrix, startProbs, timeSteps) {
obs=simulation$observation
state=simulation$states
noStates=dim(emissionMatrix)[1]
a = matrix(NA, nrow=dim(emissionMatrix)[1], ncol=timeSteps)
a[,1]=emissionMatrix[obs[1],]*startProbs[i]
for (i in 2:100) {
a[,i] = emissionMatrix[obs[i],]*colSums(sum(a[,i-1])*transitionMatrix)
}
return(a)
}
calcAlpha=forwardAlgo(simulation, emissionMatrix, transitionMatrix, rep(0.1,10), 100)
calcFiltered=calcFiltering(calcAlpha, 100)
mostProb_calcFiltered=apply(calcFiltered, 2, which.max)
table(mostProb_calcFiltered==simulation$states)
x=matrix(1,2,2)
y=10
x
colSum(10*x)
colSums(10*x)
x[1,2]=2
x
colSums(10*x)
filtered=calcFiltering(alpha, 100)
mostProb_filtered=apply(filtered, 2, which.max)
table(mostProb_filtered==simulation$states)
forwardAlgo = function(simulation, emissionMatrix, transitionMatrix, startProbs, timeSteps) {
obs=simulation$observation
state=simulation$states
noStates=dim(emissionMatrix)[1]
a = matrix(NA, nrow=dim(emissionMatrix)[1], ncol=timeSteps)
a[,1]=emissionMatrix[obs[1],]*startProbs[i]
for (i in 2:100) {
a[,i] = emissionMatrix[obs[i],]*colSums(t(a[,i-1])*transitionMatrix)
}
return(a)
}
calcAlpha=forwardAlgo(simulation, emissionMatrix, transitionMatrix, rep(0.1,10), 100)
filtered=calcFiltering(alpha, 100)
mostProb_filtered=apply(filtered, 2, which.max)
table(mostProb_filtered==simulation$states)
forwardAlgo = function(simulation, emissionMatrix, transitionMatrix, startProbs, timeSteps) {
obs=simulation$observation
state=simulation$states
noStates=dim(emissionMatrix)[1]
a = matrix(NA, nrow=dim(emissionMatrix)[1], ncol=timeSteps)
a[,1]=emissionMatrix[obs[1],]*startProbs[i]
for (i in 2:100) {
a[,i] = emissionMatrix[obs[i],]*a[,i-1]*colSums(transitionMatrix)
}
return(a)
}
calcAlpha=forwardAlgo(simulation, emissionMatrix, transitionMatrix, rep(0.1,10), 100)
calcFiltered=calcFiltering(calcAlpha, 100)
mostProb_calcFiltered=apply(calcFiltered, 2, which.max)
table(mostProb_calcFiltered==simulation$states)
filtered=calcFiltering(alpha, 100)
mostProb_filtered=apply(filtered, 2, which.max)
table(mostProb_filtered==simulation$states)
forwardAlgo = function(simulation, emissionMatrix, transitionMatrix, startProbs, timeSteps) {
obs=simulation$observation
state=simulation$states
noStates=dim(emissionMatrix)[1]
a = matrix(NA, nrow=dim(emissionMatrix)[1], ncol=timeSteps)
a[,1]=emissionMatrix[obs[1],]*startProbs[i]
for (i in 2:100) {
a[,i] = emissionMatrix[obs[i],]*a[,i-1]*rowSums(transitionMatrix)
}
return(a)
}
calcAlpha=forwardAlgo(simulation, emissionMatrix, transitionMatrix, rep(0.1,10), 100)
calcFiltered=calcFiltering(calcAlpha, 100)
mostProb_calcFiltered=apply(calcFiltered, 2, which.max)
table(mostProb_calcFiltered==simulation$states)
filtered=calcFiltering(alpha, 100)
mostProb_filtered=apply(filtered, 2, which.max)
table(mostProb_filtered==simulation$states)
forwardAlgo = function(simulation, emissionMatrix, transitionMatrix, startProbs, timeSteps) {
obs=simulation$observation
state=simulation$states
noStates=dim(emissionMatrix)[1]
a = matrix(NA, nrow=dim(emissionMatrix)[1], ncol=timeSteps)
a[,1]=emissionMatrix[obs[1],]*startProbs[i]
for (i in 2:100) {
a[,i] = emissionMatrix[obs[i],]*colSums(a[,i-1]*transitionMatrix)
}
return(a)
}
calcAlpha=forwardAlgo(simulation, emissionMatrix, transitionMatrix, rep(0.1,10), 100)
calcFiltered=calcFiltering(calcAlpha, 100)
mostProb_calcFiltered=apply(calcFiltered, 2, which.max)
table(mostProb_calcFiltered==simulation$states)
View(alpha)
forwardAlgo = function(simulation, emissionMatrix, transitionMatrix, startProbs, timeSteps) {
obs=simulation$observation
noStates=dim(emissionMatrix)[1]
a = matrix(NA, nrow=dim(emissionMatrix)[1], ncol=timeSteps)
a[,1]=emissionMatrix[obs[1],]*startProbs[i]
for (i in 2:100) {
a[,i] = emissionMatrix[obs[i],]*colSums(a[,i-1]*transitionMatrix)
}
return(a)
}
calcAlpha=forwardAlgo(simulation, emissionMatrix, transitionMatrix, rep(0.1,10), 100)
calcFiltered=calcFiltering(calcAlpha, 100)
mostProb_calcFiltered=apply(calcFiltered, 2, which.max)
table(mostProb_calcFiltered==simulation$states)
source('~/SKOLA/LIU/Ã…k 5/TDDE15/TDDE15_Labs/Exam/2018-10-24/2018-10-24_Assignment2.R', echo=TRUE)
source('~/SKOLA/LIU/Ã…k 5/TDDE15/TDDE15_Labs/Exam/2018-10-24/2018-10-24_Assignment2.R', echo=TRUE)
View(HMM_model)
forwardAlgo = function(simulation, emissionMatrix, transitionMatrix, startProbs) {
obs=simulation$observation
n=length(obs)
noStates=dim(emissionMatrix)[1]
a = matrix(NA, nrow=dim(emissionMatrix)[1], ncol=n)
a[,1]=emissionMatrix[obs[1],]*startProbs[i]
for (i in 2:n) {
a[,i] = emissionMatrix[obs[i],]*colSums(a[,i-1]*transitionMatrix)
}
return(a)
}
calcAlpha=forwardAlgo(simulation, emissionMatrix, transitionMatrix, rep(0.1,10), 100)
calcFiltered=calcFiltering(calcAlpha, 100)
forwardAlgo = function(simulation, emissionMatrix, transitionMatrix, startProbs) {
obs=simulation$observation
n=length(obs)
noStates=dim(emissionMatrix)[1]
a = matrix(NA, nrow=dim(emissionMatrix)[1], ncol=n)
a[,1]=emissionMatrix[obs[1],]*startProbs[i]
for (i in 2:n) {
a[,i] = emissionMatrix[obs[i],]*colSums(a[,i-1]*transitionMatrix)
}
return(a)
}
forwardAlgo = function(simulation, emissionMatrix, transitionMatrix, startProbs) {
obs=simulation$observation
n=length(obs)
noStates=dim(emissionMatrix)[1]
a = matrix(NA, nrow=dim(emissionMatrix)[1], ncol=n)
a[,1]=emissionMatrix[obs[1],]*startProbs[i]
for (i in 2:n) {
a[,i] = emissionMatrix[obs[i],]*colSums(a[,i-1]*transitionMatrix)
}
return(a)
}
calcAlpha=forwardAlgo(simulation, emissionMatrix, transitionMatrix, rep(0.1,10))
calcFiltered=calcFiltering(calcAlpha, 100)
mostProb_calcFiltered=apply(calcFiltered, 2, which.max)
table(mostProb_calcFiltered==simulation$states)
table(mostProb_filtered==simulation$states)
forwardAlgo = function(simulation, emissionMatrix, transitionMatrix, startProbs) {
obs=simulation$observation
n=length(obs)
noStates=dim(emissionMatrix)[1]
a = matrix(NA, nrow=dim(emissionMatrix)[1], ncol=n)
a[,1]=emissionMatrix[obs[1],]*startProbs
for (i in 2:n) {
a[,i] = emissionMatrix[obs[i],]*colSums(a[,i-1]*transitionMatrix)
}
return(a)
}
calcAlpha=forwardAlgo(simulation, emissionMatrix, transitionMatrix, rep(0.1,10))
calcFiltered=calcFiltering(calcAlpha, 100)
mostProb_calcFiltered=apply(calcFiltered, 2, which.max)
table(mostProb_calcFiltered==simulation$states)
table(mostProb_filtered==simulation$states)
sigmaF=1
elle=0.5
zGrid=seq(0.01,1, by=0.01)
# Own implementation of Matern with nu = 3/2 (See RW book equation 4.17).
# Note that a call of the form kernelFunc <- Matern32(sigmaf = 1, ell = 0.1) returns a kernel FUNCTION.
# You can now evaluate the kernel at inputs: kernelFunc(x = 3, y = 4).
# Note also that class(kernelFunc) is of class "kernel", which is a class defined by kernlab.
Matern32 <- function(sigmaf = 1, ell = 1)
{
rval <- function(x, y = NULL) {
r = sqrt(crossprod(x-y));
return(sigmaf^2*(1+sqrt(3)*r/ell)*exp(-sqrt(3)*r/ell))
}
class(rval) <- "kernel"
return(rval)
}
zGrid=seq(0.01,1, by=0.01)
MaternFunc = Matern32(sigmaf = sigmaF, ell = elle) # MaternFunc is a kernel FUNCTION.
# Testing our own defined kernel function.
result = rep(0,length(zGrid))
# Testing our own defined kernel function.
result = rep(0,length(zGrid))
for (i in 1:length(zGrid)) {
result[i]=MaternFunc(0,zGrid[i])
}
plot(zGrid, result)
zGrid=seq(0.01,1, by=0.01)
MaternFunc = Matern32(sigmaf = sigmaF, ell = elle) # MaternFunc is a kernel FUNCTION.
# Testing our own defined kernel function.
result = rep(0,length(zGrid))
for (i in 1:length(zGrid)) {
result[i]=MaternFunc(0,zGrid[i])
}
plot(zGrid, result, type="l", lwd=2, col="red", main="Plot of matern kernel for different distances", xlab="Distance",
ylab="Covariance")
source('~/SKOLA/LIU/Ã…k 5/TDDE15/TDDE15_Labs/Exam/2018-10-24/2018-10-24_Assignment4.R', echo=TRUE)
plot(zGrid, result, type="l", lwd=2, col="red", main="Plot of matern kernel for different distances", xlab="Distance",
plot(zGrid, result, type="l", lwd=2, col="red", main="Plot of matern kernel for different distances", xlab="Distance",
ylab="Covariance", sub=expression(paste(sigma_f, "= 1")))
plot(zGrid, result, type="l", lwd=2, col="red", main="Plot of matern kernel for different distances", xlab="Distance",
ylab="Covariance", sub=expression(paste(sigma_f, "= 1")))
plot(zGrid, result, type="l", lwd=2, col="red", main="Plot of matern kernel for different distances", xlab="Distance",
ylab="Covariance", sub=expression(paste("sigma_f", "= 1")))
plot(zGrid, result, type="l", lwd=2, col="red", main="Plot of matern kernel for different distances", xlab="Distance",
ylab="Covariance", sub=paste(expression(sigma_f), "= 1"))
ylab="Covariance", sub=expression(paste(sigma_f, "= 1"))
ylab="Covariance", sub=expression(sigma_F + "= 1")
ylab="Covariance", sub=expression(sigma_f)
plot(zGrid, result, type="l", lwd=2, col="red", main="Plot of matern kernel for different distances", xlab="Distance",
ylab="Covariance", sub=expression(sigma))
plot(zGrid, result, type="l", lwd=2, col="red", main="Plot of matern kernel for different distances", xlab="Distance",
ylab="Covariance", sub=expression(sigma_f))
plot(zGrid, result, type="l", lwd=2, col="red", main="Plot of matern kernel for different distances", xlab="Distance",
ylab="Covariance", sub=expression("$sigma_f$"))
ylab="Covariance", sub=expression(paste(sigma[f], "= 1"))
plot(zGrid, result, type="l", lwd=2, col="red", main="Plot of matern kernel for different distances", xlab="Distance",
ylab="Covariance", sub=expression(paste("sigma[f]", "= 1")))
plot(zGrid, result, type="l", lwd=2, col="red", main="Plot of matern kernel for different distances", xlab="Distance",
ylab="Covariance", sub=expression(paste(sigma[f], "= 1")))
plot(zGrid, result2, type="l", lwd=2, col="red", main="Plot of matern kernel for different distances", xlab="Distance",
ylab="Covariance", sub=expression(paste(sigma[f]^2, "= 0.5")))
plot(zGrid, result2, type="l", lwd=2, col="red", main="Plot of matern kernel for different distances", xlab="Distance",
ylab="Covariance", sub=expression(paste(sigma[f], 0.5^2)))
plot(zGrid, result2, type="l", lwd=2, col="red", main="Plot of matern kernel for different distances", xlab="Distance",
ylab="Covariance", sub=expression(paste(sigma[f], "=",0.5^2)))
plot(zGrid, result2, type="l", lwd=2, col="red", main="Plot of matern kernel for different distances", xlab="Distance",
ylab="Covariance", sub=expression(paste(sigma[f], " = ",0.5^2)))
setwd("~/SKOLA/LIU/Ã…k 5/TDDE15/TDDE15_Labs/Exam/2018-10-24")
load("lidar.RData")
source('~/SKOLA/LIU/Ã…k 5/TDDE15/TDDE15_Labs/Exam/2018-10-24/2018-10-24_Assignment4.R', echo=TRUE)
load("lidar.RData")
posteriorGP = function(X, y, XStar, sigmaNoise, k, ...) {
n = length(X)
K=k(X, X, ...)
kStar=k(X,XStar, ...)
L = t(chol(K + sigmaNoise^2*diag(n)))
alpha=solve(t(L),solve(L, y))
predMean=t(kStar)%*%alpha
v=solve(L, kStar)
predVar=k(XStar, XStar, ...)-t(v)%*%v
return(list(mean=predMean, var=predVar))
}
mean=mean(logratio)
sd=sqrt(var(logratio))
mean=mean(logratio)
sd=sqrt(var(logratio))
sigmaN=0.05
sigmaF=1
MaternKernel1 = Matern32(sigmaf = sigmaF, ell = 1) # MaternFunc is a kernel FUNCTION.
MaternKernel2 = Matern32(sigmaf = sigmaF, ell = 5) # MaternFunc is a kernel FUNCTION.
posterior = posteriorGP(scale(distance), scale(logratio), scale(distance), sigmaN, MaternKernel1, sigmaF, 1)
posterior = posteriorGP(scale(distance), scale(logratio), scale(distance), sigmaN, MaternKernel1)
posterior = posteriorGP(scale(distance), scale(logratio), scale(distance), sigmaN, MaternKernel1)
posterior = posteriorGP(scale(distance), scale(logratio), scale(distance), sigmaN, Matern32, sigmaF, 1)
posterior = posteriorGP(scale(distance), scale(logratio), scale(distance), sigmaN, Matern32(1,1))
posterior = posteriorGP(scale(distance), scale(logratio), scale(distance), sigmaN, Matern32)
library(kernlab)
help(gausspr)
load("lidar.RData")
library(kernlab)
sigmaN=0.05
sigmaF=1
MaternKernel1 = Matern32(sigmaf = sigmaF, ell = 1) # MaternFunc is a kernel FUNCTION.
MaternKernel2 = Matern32(sigmaf = sigmaF, ell = 5) # MaternFunc is a kernel FUNCTION.
GPFit=gausspr(distance, logratio, kernel=MaternKernel1, var=sigmaN^2)
postMean=predict(GPFit, newdata=distance)
plot(distance, logratio, type="p", main="Distance vs logratio")
lines(distance, postMean, type="l", lwd=2, xlab="Time", ylab="Temp", col="red")
plot(distance, logratio, type="p", main="Distance vs logratio")
lines(distance, postMean, type="l", lwd=2, xlab="Time", ylab="Temp", col="red")
lines(time, postMean+1.96*sqrt(diag(cov1)), lwd=2, lty=2, col="gray")
lines(time, postMean-1.96*sqrt(diag(cov1)), lwd=2, lty=2, col="gray")
lines(time, postMean+1.96*sqrt(diag(cov1)+sigmaN^2), lwd=2, lty=2, col="blue")
lines(time, postMean-1.96*sqrt(diag(cov1)+sigmaN^2), lwd=2, lty=2, col="blue")
load("lidar.RData")
library(kernlab)
sigmaN=0.05
sigmaF=1
MaternKernel1 = Matern32(sigmaf = sigmaF, ell = 1) # MaternFunc is a kernel FUNCTION.
MaternKernel2 = Matern32(sigmaf = sigmaF, ell = 5) # MaternFunc is a kernel FUNCTION.
Kxx1=kernelMatrix(MaternKernel1, distance, distance)
Kxx2=kernelMatrix(MaternKernel2, distance, distance)
n=length(distance)
cov1=Kxx1-Kxx1%*%solve(Kxx1+sigmaN^2*diag(n), Kxx1) # since X and XStar the same
cov2=Kxx2-Kxx2%*%solve(Kxx2+sigmaN^2*diag(n), Kxx2) # since X and XStar the same
GPFit=gausspr(distance, logratio, kernel=MaternKernel1, var=sigmaN^2)
postMean=predict(GPFit, newdata=distance)
plot(distance, logratio, type="p", main="Distance vs logratio")
lines(distance, postMean, type="l", lwd=2, xlab="Time", ylab="Temp", col="red")
lines(time, postMean+1.96*sqrt(diag(cov1)), lwd=2, lty=2, col="gray")
lines(time, postMean-1.96*sqrt(diag(cov1)), lwd=2, lty=2, col="gray")
GPFit=gausspr(distance, logratio, kernel=MaternKernel1, var=sigmaN^2)
postMean=predict(GPFit, newdata=distance)
plot(distance, logratio, type="p", main="Distance vs logratio")
lines(distance, postMean, type="l", lwd=2, xlab="Time", ylab="Temp", col="red")
lines(distance, postMean+1.96*sqrt(diag(cov1)), lwd=2, lty=2, col="gray")
lines(distance, postMean-1.96*sqrt(diag(cov1)), lwd=2, lty=2, col="gray")
lines(distance, postMean+1.96*sqrt(diag(cov1)+sigmaN^2), lwd=2, lty=2, col="blue")
lines(distance, postMean-1.96*sqrt(diag(cov1)+sigmaN^2), lwd=2, lty=2, col="blue")
legend("bottomleft", legend=c("Data", "Posterior mean", "95 % prob. bands", "95 % pred. bands"), pch=c(1,NaN, NaN, NaN),
lwd=c(NaN, 2,2,2), lty=c(NaN, 1, 21, 21), col=c("black", "red", "gray", "blue"))
GPFit=gausspr(distance, logratio, kernel=MaternKernel2, var=sigmaN^2)
postMean=predict(GPFit, newdata=distance)
plot(distance, logratio, type="p", main="Distance vs logratio")
lines(distance, postMean, type="l", lwd=2, xlab="Time", ylab="Temp", col="red")
lines(distance, postMean+1.96*sqrt(diag(cov1)), lwd=2, lty=2, col="gray")
lines(distance, postMean-1.96*sqrt(diag(cov1)), lwd=2, lty=2, col="gray")
lines(distance, postMean+1.96*sqrt(diag(cov1)+sigmaN^2), lwd=2, lty=2, col="blue")
lines(distance, postMean-1.96*sqrt(diag(cov1)+sigmaN^2), lwd=2, lty=2, col="blue")
legend("bottomleft", legend=c("Data", "Posterior mean", "95 % prob. bands", "95 % pred. bands"), pch=c(1,NaN, NaN, NaN),
lwd=c(NaN, 2,2,2), lty=c(NaN, 1, 21, 21), col=c("black", "red", "gray", "blue"))
