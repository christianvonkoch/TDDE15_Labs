real_dag = model2network("[A][S][T|A][L|S][B|S][D|B:E][E|T:L][X|E]")
fit=bn.fit(BNmodel, train)
fit_real=bn.fit(real_dag, train)
fitTable=as.grain(fit)
fitTable_real=as.grain(fit_real)
junctionTree=compile(fitTable)
junctionTree_real=compile(fitTable_real)
obsVars=c("A", "T", "L", "B", "E", "X", "D")
tarVar=c("S")
predictionTest <- predictNet(junctionTree, test, obsVars, tarVar)
predictionTrue <- predictNet(junctionTree_real, test, obsVars, tarVar)
confTable=table(predictionTest, test$S)
confTable_real=table(predictionTrue, test$S)
confTable
confTable_real
plot(junctionTree)
plot(junctionTree_real)
markovBlanket=mb(fit_real, node="S")
print(markovBlanket)
predictMarkovBlanket=predictNet(junctionTree, test, markovBlanket, tarVar)
confTable_MB=table(predictMarkovBlanket, test$S)
confTable_MB
set.seed(12345)
naive_dag=model2network("[S][A|S][B|S][X|S][T|S][L|S][E|S][D|S]")
naive_fit=bn.fit(naive_dag, train)
fitNaive=as.grain(naive_fit)
naive_JunctionTree=compile(fitNaive)
naivePred=predictNet(naive_JunctionTree, test, obsVars, tarVar)
naiveConf=table(naivePred, test$S)
naiveConf
knitr::opts_chunk$set(echo = TRUE)
RNGversion('3.6.3')
library(bnlearn)
library(Rgraphviz)
library(gRain)
library(RBGL)
data("asia")
init_dag1 = model2network("[A][S][T|A][L|S][B|S][D|B:E][E|T:L][X|E]")
init_dag2 = model2network("[B][D][X][E|D:B][L|B][T|L:B:X][S|X][A|B]")
plot(init_dag1)
plot(init_dag2)
random_restarts=c(1,10,1000)
scores=c("aic", "bic", "bde")
iss=c(1,10,100)
# Testing different initial structures
model1_init=hc(asia, start=init_dag1)
model2_init=hc(asia, start=init_dag2)
all.equal(model1_init, model2_init)
# Changed the resulting network
# Testing different random restarts
model1_random=hc(asia, restart=random_restarts[1])
model2_random=hc(asia, restart=random_restarts[2])
model3_random=hc(asia, restart=random_restarts[3])
plot(model3_random)
plot(model2_random)
all.equal(model1_random, model2_random)
all.equal(model1_random, model3_random)
all.equal(model2_random, model3_random)
# Changed the resulting network
# Testing different score models
model1_score=hc(asia, score=scores[1])
model2_score=hc(asia, score=scores[2])
model3_score=hc(asia, score=scores[3])
all.equal(model1_score, model2_score)
all.equal(model1_score, model3_score)
all.equal(model2_score, model3_score)
# Fundamentally changed the resulting network
# Testing different imaginary sample sizes
model1_iss=hc(asia, score="bde", iss=iss[1])
model2_iss=hc(asia, score="bde", iss=iss[2])
model3_iss=hc(asia, score="bde", iss=iss[3])
all.equal(model1_iss, model2_iss)
all.equal(model1_iss, model3_iss)
all.equal(model2_iss, model3_iss)
plot(model1_iss)
plot(model3_iss)
predictNet <- function(juncTree, data, features, target){
predArray <- matrix(nrow=nrow(data),ncol=1)
for(i in 1:nrow(data)){
obsStates <- NULL
for(p in features){
if(data[i,p]=="yes"){
obsStates <- c(obsStates,"yes")
} else{
obsStates <- c(obsStates,"no")
}
}
obsEvidence <- setEvidence(object = juncTree,
nodes = features,
states = obsStates)
obsPredProb <- querygrain(object = obsEvidence,
nodes = target)$S
predArray[i] <- if(obsPredProb["yes"]>=0.5) "yes" else "no"
}
return(predArray)
}
n=dim(asia)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.8))
train=asia[id,]
test=asia[-id,]
hcBNTest <- hc(train, start = model2network("[B][T][A|T][S|A][L|A][D|B:L][E|T:L][X|E]"), score="bde",
iss=5)
BNTrue <- model2network("[A][S][T|A][L|S][B|S][D|B:E][E|T:L][X|E]")
plot(hcBNTest)
plot(BNTrue)
fittedTest <- bn.fit(hcBNTest, train) #Fitting parameters in structure with traindata
fittedTrue <- bn.fit(BNTrue, train)
BNGrainTest = as.grain(fittedTest) #Graphical independence network
BNGrainTrue = as.grain(fittedTrue)
junctionTreeTest <- compile(BNGrainTest) #Get cliques with potentials (Lauritzen-Spiegelhalter algorithm
junctionTreeTrue <- compile(BNGrainTrue)
obsVars=c("A", "T", "L", "B", "E", "X", "D")
tarVar=c("S")
predictionTest <- predictNet(junctionTreeTest, test, obsVars, tarVar)
predictionTrue <- predictNet(junctionTreeTrue, test, obsVars, tarVar)
confusionTest <- table(predictionTest, test$S)
confusionTest
confusionTrue <- table(predictionTrue, test$S)
confusionTrue
#Same confusion tables
obs2=mb(fittedTrue,"S")
S2=predictNet(junctionTree, test, obs2, tarVar)
knitr::opts_chunk$set(echo = TRUE)
RNGversion('3.6.3')
library(bnlearn)
library(Rgraphviz)
library(gRain)
library(RBGL)
data("asia")
init_dag1 = model2network("[A][S][T|A][L|S][B|S][D|B:E][E|T:L][X|E]")
init_dag2 = model2network("[B][D][X][E|D:B][L|B][T|L:B:X][S|X][A|B]")
plot(init_dag1)
plot(init_dag2)
random_restarts=c(1,10,1000)
scores=c("aic", "bic", "bde")
iss=c(1,10,100)
# Testing different initial structures
model1_init=hc(asia, start=init_dag1)
model2_init=hc(asia, start=init_dag2)
all.equal(model1_init, model2_init)
# Changed the resulting network
# Testing different random restarts
model1_random=hc(asia, restart=random_restarts[1])
model2_random=hc(asia, restart=random_restarts[2])
model3_random=hc(asia, restart=random_restarts[3])
plot(model3_random)
plot(model2_random)
all.equal(model1_random, model2_random)
all.equal(model1_random, model3_random)
all.equal(model2_random, model3_random)
# Changed the resulting network
# Testing different score models
model1_score=hc(asia, score=scores[1])
model2_score=hc(asia, score=scores[2])
model3_score=hc(asia, score=scores[3])
all.equal(model1_score, model2_score)
all.equal(model1_score, model3_score)
all.equal(model2_score, model3_score)
# Fundamentally changed the resulting network
# Testing different imaginary sample sizes
model1_iss=hc(asia, score="bde", iss=iss[1])
model2_iss=hc(asia, score="bde", iss=iss[2])
model3_iss=hc(asia, score="bde", iss=iss[3])
all.equal(model1_iss, model2_iss)
all.equal(model1_iss, model3_iss)
all.equal(model2_iss, model3_iss)
plot(model1_iss)
plot(model3_iss)
predictNet <- function(juncTree, data, features, target){
predArray <- matrix(nrow=nrow(data),ncol=1)
for(i in 1:nrow(data)){
obsStates <- NULL
for(p in features){
if(data[i,p]=="yes"){
obsStates <- c(obsStates,"yes")
} else{
obsStates <- c(obsStates,"no")
}
}
obsEvidence <- setEvidence(object = juncTree,
nodes = features,
states = obsStates)
obsPredProb <- querygrain(object = obsEvidence,
nodes = target)$S
predArray[i] <- if(obsPredProb["yes"]>=0.5) "yes" else "no"
}
return(predArray)
}
n=dim(asia)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.8))
train=asia[id,]
test=asia[-id,]
hcBNTest <- hc(train, start = model2network("[B][T][A|T][S|A][L|A][D|B:L][E|T:L][X|E]"), score="bde",
iss=5)
BNTrue <- model2network("[A][S][T|A][L|S][B|S][D|B:E][E|T:L][X|E]")
plot(hcBNTest)
plot(BNTrue)
fittedTest <- bn.fit(hcBNTest, train) #Fitting parameters in structure with traindata
fittedTrue <- bn.fit(BNTrue, train)
BNGrainTest = as.grain(fittedTest) #Graphical independence network
BNGrainTrue = as.grain(fittedTrue)
junctionTreeTest <- compile(BNGrainTest) #Get cliques with potentials (Lauritzen-Spiegelhalter algorithm
junctionTreeTrue <- compile(BNGrainTrue)
obsVars=c("A", "T", "L", "B", "E", "X", "D")
tarVar=c("S")
predictionTest <- predictNet(junctionTreeTest, test, obsVars, tarVar)
predictionTrue <- predictNet(junctionTreeTrue, test, obsVars, tarVar)
confusionTest <- table(predictionTest, test$S)
confusionTest
confusionTrue <- table(predictionTrue, test$S)
confusionTrue
#Same confusion tables
obs2=mb(fittedTrue,"S")
S2=predictNet(junctionTree, test, obs2, tarVar)
knitr::opts_chunk$set(echo = TRUE)
RNGversion('3.6.3')
library(bnlearn)
library(Rgraphviz)
library(gRain)
library(RBGL)
data("asia")
init_dag1 = model2network("[A][S][T|A][L|S][B|S][D|B:E][E|T:L][X|E]")
init_dag2 = model2network("[B][D][X][E|D:B][L|B][T|L:B:X][S|X][A|B]")
plot(init_dag1)
plot(init_dag2)
random_restarts=c(1,10,1000)
scores=c("aic", "bic", "bde")
iss=c(1,10,100)
# Testing different initial structures
model1_init=hc(asia, start=init_dag1)
model2_init=hc(asia, start=init_dag2)
all.equal(model1_init, model2_init)
# Changed the resulting network
# Testing different random restarts
model1_random=hc(asia, restart=random_restarts[1])
model2_random=hc(asia, restart=random_restarts[2])
model3_random=hc(asia, restart=random_restarts[3])
plot(model3_random)
plot(model2_random)
all.equal(model1_random, model2_random)
all.equal(model1_random, model3_random)
all.equal(model2_random, model3_random)
# Changed the resulting network
# Testing different score models
model1_score=hc(asia, score=scores[1])
model2_score=hc(asia, score=scores[2])
model3_score=hc(asia, score=scores[3])
all.equal(model1_score, model2_score)
all.equal(model1_score, model3_score)
all.equal(model2_score, model3_score)
# Fundamentally changed the resulting network
# Testing different imaginary sample sizes
model1_iss=hc(asia, score="bde", iss=iss[1])
model2_iss=hc(asia, score="bde", iss=iss[2])
model3_iss=hc(asia, score="bde", iss=iss[3])
all.equal(model1_iss, model2_iss)
all.equal(model1_iss, model3_iss)
all.equal(model2_iss, model3_iss)
plot(model1_iss)
plot(model3_iss)
predictNet <- function(juncTree, data, features, target){
predArray <- matrix(nrow=nrow(data),ncol=1)
for(i in 1:nrow(data)){
obsStates <- NULL
for(p in features){
if(data[i,p]=="yes"){
obsStates <- c(obsStates,"yes")
} else{
obsStates <- c(obsStates,"no")
}
}
obsEvidence <- setEvidence(object = juncTree,
nodes = features,
states = obsStates)
obsPredProb <- querygrain(object = obsEvidence,
nodes = target)$S
predArray[i] <- if(obsPredProb["yes"]>=0.5) "yes" else "no"
}
return(predArray)
}
n=dim(asia)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.8))
train=asia[id,]
test=asia[-id,]
hcBNTest <- hc(train, start = model2network("[B][T][A|T][S|A][L|A][D|B:L][E|T:L][X|E]"), score="bde",
iss=5)
BNTrue <- model2network("[A][S][T|A][L|S][B|S][D|B:E][E|T:L][X|E]")
plot(hcBNTest)
plot(BNTrue)
fittedTest <- bn.fit(hcBNTest, train) #Fitting parameters in structure with traindata
fittedTrue <- bn.fit(BNTrue, train)
BNGrainTest = as.grain(fittedTest) #Graphical independence network
BNGrainTrue = as.grain(fittedTrue)
junctionTreeTest <- compile(BNGrainTest) #Get cliques with potentials (Lauritzen-Spiegelhalter algorithm
junctionTreeTrue <- compile(BNGrainTrue)
obsVars=c("A", "T", "L", "B", "E", "X", "D")
tarVar=c("S")
predictionTest <- predictNet(junctionTreeTest, test, obsVars, tarVar)
predictionTrue <- predictNet(junctionTreeTrue, test, obsVars, tarVar)
confusionTest <- table(predictionTest, test$S)
confusionTest
confusionTrue <- table(predictionTrue, test$S)
confusionTrue
#Same confusion tables
obs2=mb(fittedTrue,"S")
S2=predictNet(junctionTree, test, obs2, tarVar)
knitr::opts_chunk$set(echo = TRUE)
RNGversion('3.6.3')
library(bnlearn)
library(Rgraphviz)
library(gRain)
library(RBGL)
data("asia")
init_dag1 = model2network("[A][S][T|A][L|S][B|S][D|B:E][E|T:L][X|E]")
init_dag2 = model2network("[B][D][X][E|D:B][L|B][T|L:B:X][S|X][A|B]")
plot(init_dag1)
plot(init_dag2)
random_restarts=c(1,10,1000)
scores=c("aic", "bic", "bde")
iss=c(1,10,100)
# Testing different initial structures
model1_init=hc(asia, start=init_dag1)
model2_init=hc(asia, start=init_dag2)
all.equal(model1_init, model2_init)
# Changed the resulting network
# Testing different random restarts
model1_random=hc(asia, restart=random_restarts[1])
model2_random=hc(asia, restart=random_restarts[2])
model3_random=hc(asia, restart=random_restarts[3])
plot(model3_random)
plot(model2_random)
all.equal(model1_random, model2_random)
all.equal(model1_random, model3_random)
all.equal(model2_random, model3_random)
# Changed the resulting network
# Testing different score models
model1_score=hc(asia, score=scores[1])
model2_score=hc(asia, score=scores[2])
model3_score=hc(asia, score=scores[3])
all.equal(model1_score, model2_score)
all.equal(model1_score, model3_score)
all.equal(model2_score, model3_score)
# Fundamentally changed the resulting network
# Testing different imaginary sample sizes
model1_iss=hc(asia, score="bde", iss=iss[1])
model2_iss=hc(asia, score="bde", iss=iss[2])
model3_iss=hc(asia, score="bde", iss=iss[3])
all.equal(model1_iss, model2_iss)
all.equal(model1_iss, model3_iss)
all.equal(model2_iss, model3_iss)
plot(model1_iss)
plot(model3_iss)
predictNet <- function(juncTree, data, features, target){
predArray <- matrix(nrow=nrow(data),ncol=1)
for(i in 1:nrow(data)){
obsStates <- NULL
for(p in features){
if(data[i,p]=="yes"){
obsStates <- c(obsStates,"yes")
} else{
obsStates <- c(obsStates,"no")
}
}
obsEvidence <- setEvidence(object = juncTree,
nodes = features,
states = obsStates)
obsPredProb <- querygrain(object = obsEvidence,
nodes = target)$S
predArray[i] <- if(obsPredProb["yes"]>=0.5) "yes" else "no"
}
return(predArray)
}
n=dim(asia)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.8))
train=asia[id,]
test=asia[-id,]
hcBNTest <- hc(train, start = model2network("[B][T][A|T][S|A][L|A][D|B:L][E|T:L][X|E]"), score="bde",
iss=5)
BNTrue <- model2network("[A][S][T|A][L|S][B|S][D|B:E][E|T:L][X|E]")
plot(hcBNTest)
plot(BNTrue)
fittedTest <- bn.fit(hcBNTest, train) #Fitting parameters in structure with traindata
fittedTrue <- bn.fit(BNTrue, train)
BNGrainTest = as.grain(fittedTest) #Graphical independence network
BNGrainTrue = as.grain(fittedTrue)
junctionTreeTest <- compile(BNGrainTest) #Get cliques with potentials (Lauritzen-Spiegelhalter algorithm
junctionTreeTrue <- compile(BNGrainTrue)
obsVars=c("A", "T", "L", "B", "E", "X", "D")
tarVar=c("S")
predictionTest <- predictNet(junctionTreeTest, test, obsVars, tarVar)
predictionTrue <- predictNet(junctionTreeTrue, test, obsVars, tarVar)
confusionTest <- table(predictionTest, test$S)
confusionTest
confusionTrue <- table(predictionTrue, test$S)
confusionTrue
#Same confusion tables
obs2=mb(fittedTrue,"S")
S2=predictNet(junctionTreeTest, test, obs2, tarVar)
table(S2,test$S)
set.seed(12345)
bnNaive=model2network("[S][A|S][B|S][X|S][T|S][L|S][E|S][D|S]")
plot(bnNaive)
naiveFit=bn.fit(bnNaive,train)
grainNaive = as.grain(naiveFit) # Grapical independence network
junctionNaive= compile(grainNaive) # Get cliques with potential values.
Snaive=predictNet(naive_JunctionTree, test, obsVars, tarVar)
knitr::opts_chunk$set(echo = TRUE)
RNGversion('3.6.3')
library(bnlearn)
library(Rgraphviz)
library(gRain)
library(RBGL)
data("asia")
init_dag1 = model2network("[A][S][T|A][L|S][B|S][D|B:E][E|T:L][X|E]")
init_dag2 = model2network("[B][D][X][E|D:B][L|B][T|L:B:X][S|X][A|B]")
plot(init_dag1)
plot(init_dag2)
random_restarts=c(1,10,1000)
scores=c("aic", "bic", "bde")
iss=c(1,10,100)
# Testing different initial structures
model1_init=hc(asia, start=init_dag1)
model2_init=hc(asia, start=init_dag2)
all.equal(model1_init, model2_init)
# Changed the resulting network
# Testing different random restarts
model1_random=hc(asia, restart=random_restarts[1])
model2_random=hc(asia, restart=random_restarts[2])
model3_random=hc(asia, restart=random_restarts[3])
plot(model3_random)
plot(model2_random)
all.equal(model1_random, model2_random)
all.equal(model1_random, model3_random)
all.equal(model2_random, model3_random)
# Changed the resulting network
# Testing different score models
model1_score=hc(asia, score=scores[1])
model2_score=hc(asia, score=scores[2])
model3_score=hc(asia, score=scores[3])
all.equal(model1_score, model2_score)
all.equal(model1_score, model3_score)
all.equal(model2_score, model3_score)
# Fundamentally changed the resulting network
# Testing different imaginary sample sizes
model1_iss=hc(asia, score="bde", iss=iss[1])
model2_iss=hc(asia, score="bde", iss=iss[2])
model3_iss=hc(asia, score="bde", iss=iss[3])
all.equal(model1_iss, model2_iss)
all.equal(model1_iss, model3_iss)
all.equal(model2_iss, model3_iss)
plot(model1_iss)
plot(model3_iss)
predictNet <- function(juncTree, data, features, target){
predArray <- matrix(nrow=nrow(data),ncol=1)
for(i in 1:nrow(data)){
obsStates <- NULL
for(p in features){
if(data[i,p]=="yes"){
obsStates <- c(obsStates,"yes")
} else{
obsStates <- c(obsStates,"no")
}
}
obsEvidence <- setEvidence(object = juncTree,
nodes = features,
states = obsStates)
obsPredProb <- querygrain(object = obsEvidence,
nodes = target)$S
predArray[i] <- if(obsPredProb["yes"]>=0.5) "yes" else "no"
}
return(predArray)
}
n=dim(asia)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.8))
train=asia[id,]
test=asia[-id,]
hcBNTest <- hc(train, start = model2network("[B][T][A|T][S|A][L|A][D|B:L][E|T:L][X|E]"), score="bde",
iss=5)
BNTrue <- model2network("[A][S][T|A][L|S][B|S][D|B:E][E|T:L][X|E]")
plot(hcBNTest)
plot(BNTrue)
fittedTest <- bn.fit(hcBNTest, train) #Fitting parameters in structure with traindata
fittedTrue <- bn.fit(BNTrue, train)
BNGrainTest = as.grain(fittedTest) #Graphical independence network
BNGrainTrue = as.grain(fittedTrue)
junctionTreeTest <- compile(BNGrainTest) #Get cliques with potentials (Lauritzen-Spiegelhalter algorithm
junctionTreeTrue <- compile(BNGrainTrue)
obsVars=c("A", "T", "L", "B", "E", "X", "D")
tarVar=c("S")
predictionTest <- predictNet(junctionTreeTest, test, obsVars, tarVar)
predictionTrue <- predictNet(junctionTreeTrue, test, obsVars, tarVar)
confusionTest <- table(predictionTest, test$S)
confusionTest
confusionTrue <- table(predictionTrue, test$S)
confusionTrue
#Same confusion tables
obs2=mb(fittedTrue,"S")
S2=predictNet(junctionTreeTest, test, obs2, tarVar)
table(S2,test$S)
set.seed(12345)
bnNaive=model2network("[S][A|S][B|S][X|S][T|S][L|S][E|S][D|S]")
plot(bnNaive)
naiveFit=bn.fit(bnNaive,train)
grainNaive = as.grain(naiveFit) # Grapical independence network
junctionNaive= compile(grainNaive) # Get cliques with potential values.
Snaive=predictNet(junctionNaive, test, obsVars, tarVar)
table(Snaive,test$S)
