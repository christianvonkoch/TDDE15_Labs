counter=1
for (i in noObs) {
accVec[counter]=simulationHMM(HMM_model,i)[1,2]
counter=counter+1
}
simulationHMM=function(HMM_model, noSim) {
simulation=simHMM(HMM_model, length=noSim)
obsStates=simulation$observation
states=simulation$states
alpha=exp(forward(HMM_model, obsStates))
beta=exp(backward(HMM_model, obsStates))
filtered=calcFiltering(HMM_model, alpha, noSim)
smoothed=calcSmoothing(HMM_model, alpha, beta, noSim)
mostProbPath=viterbi(HMM_model, obsStates)
mostProb_filtered=apply(filtered, 2, which.max)
mostProb_filtered
mostProb_smoothed=apply(smoothed, 2, which.max)
acc_mostProb=calcAccuracy(states, mostProbPath)
acc_filtered=calcAccuracy(states, mostProb_filtered)
acc_smoothed=calcAccuracy(states, mostProb_smoothed)
accVec=c(acc_mostProb, acc_filtered, acc_smoothed)
return(matrix(accVec, 1, 3))
}
accMatrix=matrix(0,1000, 3)
noObs=seq(10,1000,10)
accVec=rep(0,length(noObs))
counter=1
for (i in noObs) {
accVec[counter]=simulationHMM(HMM_model,i)[1,2]
counter=counter+1
}
simulationHMM=function(HMM_model, noSim) {
simulation=simHMM(HMM_model, length=noSim)
obsStates=simulation$observation
states=simulation$states
alpha=exp(forward(HMM_model, obsStates))
beta=exp(backward(HMM_model, obsStates))
filtered=calcFiltering(HMM_model, alpha, noSim)
smoothed=calcSmoothing(HMM_model, alpha, beta, noSim)
mostProbPath=viterbi(HMM_model, obsStates)
mostProb_filtered=apply(filtered, 2, which.max)
print(mostProb_filtered)
mostProb_smoothed=apply(smoothed, 2, which.max)
acc_mostProb=calcAccuracy(states, mostProbPath)
acc_filtered=calcAccuracy(states, mostProb_filtered)
acc_smoothed=calcAccuracy(states, mostProb_smoothed)
accVec=c(acc_mostProb, acc_filtered, acc_smoothed)
return(matrix(accVec, 1, 3))
}
noObs=seq(10,1000,10)
accVec=rep(0,length(noObs))
counter=1
for (i in noObs) {
accVec[counter]=simulationHMM(HMM_model,i)[1,2]
counter=counter+1
}
simulationHMM=function(HMM_model, noSim) {
simulation=simHMM(HMM_model, length=noSim)
obsStates=simulation$observation
states=simulation$states
alpha=exp(forward(HMM_model, obsStates))
beta=exp(backward(HMM_model, obsStates))
filtered=calcFiltering(HMM_model, alpha, noSim)
print(filtered)
smoothed=calcSmoothing(HMM_model, alpha, beta, noSim)
mostProbPath=viterbi(HMM_model, obsStates)
mostProb_filtered=apply(filtered, 2, which.max)
mostProb_smoothed=apply(smoothed, 2, which.max)
acc_mostProb=calcAccuracy(states, mostProbPath)
acc_filtered=calcAccuracy(states, mostProb_filtered)
acc_smoothed=calcAccuracy(states, mostProb_smoothed)
accVec=c(acc_mostProb, acc_filtered, acc_smoothed)
return(matrix(accVec, 1, 3))
}
noObs=seq(10,1000,10)
accVec=rep(0,length(noObs))
counter=1
for (i in noObs) {
accVec[counter]=simulationHMM(HMM_model,i)[1,2]
counter=counter+1
}
calcAccuracy = function(trueState, calcState) {
n=length(trueState)
return(sum(trueState==calcState)/n)
}
states=simulation$states
acc_mostProb=calcAccuracy(states, mostProbPath)
acc_filtered=calcAccuracy(states, mostProb_filtered)
acc_smoothed=calcAccuracy(states, mostProb_smoothed)
simulationHMM=function(HMM_model, noSim) {
simulation=simHMM(HMM_model, length=noSim)
obsStates=simulation$observation
states=simulation$states
alpha=exp(forward(HMM_model, obsStates))
beta=exp(backward(HMM_model, obsStates))
filtered=calcFiltering(HMM_model, alpha, noSim)
smoothed=calcSmoothing(HMM_model, alpha, beta, noSim)
mostProbPath=viterbi(HMM_model, obsStates)
mostProb_filtered=apply(filtered, 2, which.max)
mostProb_smoothed=apply(smoothed, 2, which.max)
acc_mostProb=calcAccuracy(states, mostProbPath)
acc_filtered=calcAccuracy(states, mostProb_filtered)
acc_smoothed=calcAccuracy(states, mostProb_smoothed)
accVec=c(acc_mostProb, acc_filtered, acc_smoothed)
return(matrix(accVec, 1, 3))
}
noObs=seq(10,200,2)
accVec=rep(0,length(noObs))
counter=1
for (i in noObs) {
accVec[counter]=simulationHMM(HMM_model,i)[1,2]
counter=counter+1
}
plot(seq(1,length(noObs), 1), accVec)
lines(seq(1,length(noObs), 1), accVec)
noObs=seq(10,200,2)
accVec=rep(0,length(noObs))
counter=1
for (i in noObs) {
temp=c()
for (i in 1:10) {
temp=c(temp, simulationHMM(HMM_model,i)[1,2])
}
accVec[counter]=mean(temp)
counter=counter+1
}
noObs=seq(10,200,2)
accVec=rep(0,length(noObs))
counter=1
for (i in noObs) {
temp=c()
for (j in 1:10) {
temp=c(temp, simulationHMM(HMM_model,i)[1,2])
}
accVec[counter]=mean(temp)
counter=counter+1
}
lines(seq(1,length(noObs), 1), accVec)
plot(seq(1,length(noObs), 1), accVec)
lines(seq(1,length(noObs), 1), accVec)
plot(noObs, accVec)
lines(noObs, accVec)
help(which)
simulationHMM(HMM_model, 1000)
noObs=c(10,100,200)
filteredMatrix=matrix(0,100,3)
counter=1
for (i in noObs) {
for (j in 1:100) {
filteredMatrix[j,counter]=simulationHMM(HMM_model, i)[1,2]
}
counter=counter+1
}
plot(1:100,density(filteredMatrix[,1]))
density(filteredMatrix[,1])
filteredMatrix[,1]
filteredMatrix
plot(1:100,density(filteredMatrix[,1]))
plot(density(filteredMatrix[,1]))
plot(density(filteredMatrix[,1]))
lines(density(filteredMatrix[,2]))
lines(density(filteredMatrix[,3]))
plot(density(filteredMatrix[,1]), ylim=c(0,10))
lines(density(filteredMatrix[,2]))
lines(density(filteredMatrix[,3]))
noObs=c(10,20,50,80,100)
filteredMatrix=matrix(0,100,length(noObs))
counter=1
for (i in noObs) {
for (j in 1:100) {
filteredMatrix[j,counter]=simulationHMM(HMM_model, i)[1,2]
}
counter=counter+1
}
plot(density(filteredMatrix[,1]), ylim=c(0,10))
lines(density(filteredMatrix[,2]))
lines(density(filteredMatrix[,3]))
lines(density(filteredMatrix[,4]))
lines(density(filteredMatrix[,5]))
plot(density(filteredMatrix[,1]), ylim=c(0,8))
lines(density(filteredMatrix[,2]))
lines(density(filteredMatrix[,3]))
lines(density(filteredMatrix[,4]))
lines(density(filteredMatrix[,5]))
plot(density(filteredMatrix[,1]), ylim=c(0,8), col="red")
lines(density(filteredMatrix[,2]), col="blue")
lines(density(filteredMatrix[,3]), col="green")
lines(density(filteredMatrix[,4]), col="grey")
lines(density(filteredMatrix[,5]), col="black")
plot(density(filteredMatrix[,1]), ylim=c(0,8), col="red", xlab="Accuracy")
lines(density(filteredMatrix[,2]), col="blue")
lines(density(filteredMatrix[,3]), col="green")
lines(density(filteredMatrix[,4]), col="grey")
lines(density(filteredMatrix[,5]), col="black")
legend("topleft", box.lty = 1, legend = c("10 steps","20 steps","50 steps", "80 steps", "100 steps"),
col=c("red","blue","green", "grey", "black"), lwd = 2)
title(main="Density of accuracy for different number of observations")
plot(density(filteredMatrix[,1]), ylim=c(0,8), col="red", xlab="Accuracy")
lines(density(filteredMatrix[,2]), col="blue")
lines(density(filteredMatrix[,3]), col="green")
lines(density(filteredMatrix[,4]), col="grey")
lines(density(filteredMatrix[,5]), col="black")
legend("topleft", box.lty = 1, legend = c("10 steps","20 steps","50 steps", "80 steps", "100 steps"),
col=c("red","blue","green", "grey", "black"), lwd = 2)
title(main="Density of accuracy for different number of observations")
plot(density(filteredMatrix[,1]), ylim=c(0,8), col="red", xlab="Accuracy",
main="Density of accuracy for different number of observations")
lines(density(filteredMatrix[,2]), col="blue")
lines(density(filteredMatrix[,3]), col="green")
lines(density(filteredMatrix[,4]), col="grey")
lines(density(filteredMatrix[,5]), col="black")
legend("topleft", box.lty = 1, legend = c("10 steps","20 steps","50 steps", "80 steps", "100 steps"),
col=c("red","blue","green", "grey", "black"), lwd = 2)
entropy.empirical(filteredMatrix[,2])
entropy.empirical(filteredMatrix[,1])
entropy.empirical(filteredMatrix[,2])
entropy.empirical(filteredMatrix[,3])
entropy.empirical(filteredMatrix[,4])
entropy.empirical(filteredMatrix[,5])
help("entropy.empirical")
entropy.empirical(filteredMatrix[,1])
entropy.empirical(filteredMatrix[,2])
entropy.empirical(filteredMatrix[,3])
entropy.empirical(filteredMatrix[,4])
entropy.empirical(filteredMatrix[,5])
plot(density(filteredMatrix[,1]), ylim=c(0,8), col="red", xlab="Accuracy",
main="Density of accuracy for different number of observations")
lines(density(filteredMatrix[,2]), col="blue")
lines(density(filteredMatrix[,3]), col="green")
lines(density(filteredMatrix[,4]), col="grey")
lines(density(filteredMatrix[,5]), col="black")
entropy.empirical(density(filteredMatrix[,1]))
noObs=c(10,20,50,80,100)
filteredMatrix_acc=matrix(0,100,length(noObs))
filteredEntropy=rep(0,5)
temp=rep(0,100)
counter=1
for (i in noObs) {
for (j in 1:100) {
sim=simHMM(HMM_model, length=i)
obsStates=simulation$observation
states=simulation$states
alpha=exp(forward(HMM_model, obsStates))
beta=exp(backward(HMM_model, obsStates))
filtered=calcFiltering(HMM_model, alpha, noSim)
temp[j]=apply(filtered, 2, which.max)
acc_filtered=calcAccuracy(states, temp[j])
filteredMatrix_acc[j,counter]=accFiltered
}
filteredEntropy[counter]=mean(temp)
counter=counter+1
}
noObs=c(10,20,50,80,100)
filteredMatrix_acc=matrix(0,100,length(noObs))
filteredEntropy=rep(0,5)
temp=rep(0,100)
counter=1
for (i in noObs) {
for (j in 1:100) {
sim=simHMM(HMM_model, length=i)
obsStates=simulation$observation
states=simulation$states
alpha=exp(forward(HMM_model, obsStates))
beta=exp(backward(HMM_model, obsStates))
filtered=calcFiltering(HMM_model, alpha, i)
temp[j]=apply(filtered, 2, which.max)
acc_filtered=calcAccuracy(states, temp[j])
filteredMatrix_acc[j,counter]=accFiltered
}
filteredEntropy[counter]=mean(temp)
counter=counter+1
}
noObs=c(10,20,50,80,100)
filteredMatrix_acc=matrix(0,100,length(noObs))
filteredEntropy=rep(0,5)
temp=rep(0,100)
counter=1
for (i in noObs) {
for (j in 1:100) {
sim=simHMM(HMM_model, length=i)
obsStates=simulation$observation
states=simulation$states
alpha=exp(forward(HMM_model, obsStates))
beta=exp(backward(HMM_model, obsStates))
filtered=calcFiltering(HMM_model, alpha, i)
temp[j]=apply(filtered, 2, which.max)
acc_Filtered=calcAccuracy(states, temp[j])
filteredMatrix_acc[j,counter]=accFiltered
}
filteredEntropy[counter]=mean(temp)
counter=counter+1
}
noObs=c(10,20,50,80,100)
filteredMatrix_acc=matrix(0,100,length(noObs))
filteredEntropy=rep(0,5)
temp=rep(0,100)
counter=1
for (i in noObs) {
for (j in 1:100) {
sim=simHMM(HMM_model, length=i)
obsStates=simulation$observation
states=simulation$states
alpha=exp(forward(HMM_model, obsStates))
beta=exp(backward(HMM_model, obsStates))
filtered=calcFiltering(HMM_model, alpha, i)
temp[j]=apply(filtered, 2, which.max)
acc_filtered=calcAccuracy(states, temp[j])
filteredMatrix_acc[j,counter]=acc_filtered
}
filteredEntropy[counter]=mean(temp)
counter=counter+1
}
warnings()
noObs=c(10,20,50,80,100)
filteredMatrix=matrix(0,100,length(noObs))
counter=1
for (i in noObs) {
for (j in 1:100) {
filteredMatrix[j,counter]=simulationHMM(HMM_model, i)[1,2]
}
counter=counter+1
}
plot(density(filteredMatrix[,1]), ylim=c(0,8), col="red", xlab="Accuracy",
main="Density of accuracy for different number of observations")
lines(density(filteredMatrix[,2]), col="blue")
lines(density(filteredMatrix[,3]), col="green")
lines(density(filteredMatrix[,4]), col="grey")
lines(density(filteredMatrix[,5]), col="black")
legend("topleft", box.lty = 1, legend = c("10 steps","20 steps","50 steps", "80 steps", "100 steps"),
col=c("red","blue","green", "grey", "black"), lwd = 2)
View(smoothed)
View(filtered)
View(posterior)
noObs=c(10,20,50,80,100)
filteredMatrix=matrix(0,100,length(noObs))
entropyVec=rep(0,5)
counter=1
for (i in noObs) {
simulation=simHMM(HMM_model, length=noSim)
obsStates=simulation$observation
states=simulation$states
alpha=exp(forward(HMM_model, obsStates))
beta=exp(backward(HMM_model, obsStates))
filtered=calcFiltering(HMM_model, alpha, noSim)
mostProb_filtered=apply(filtered, 2, which.max)
entropyVec[counter]=entropy.empirical(mostProb_filtered)
for (j in 1:100) {
filteredMatrix[j,counter]=simulationHMM(HMM_model, i)[1,2]
}
counter=counter+1
}
noObs=c(10,20,50,80,100)
filteredMatrix=matrix(0,100,length(noObs))
entropyVec=rep(0,5)
counter=1
for (i in noObs) {
simulation=simHMM(HMM_model, length=i)
obsStates=simulation$observation
states=simulation$states
alpha=exp(forward(HMM_model, obsStates))
beta=exp(backward(HMM_model, obsStates))
filtered=calcFiltering(HMM_model, alpha, i)
mostProb_filtered=apply(filtered, 2, which.max)
entropyVec[counter]=entropy.empirical(mostProb_filtered)
for (j in 1:100) {
filteredMatrix[j,counter]=simulationHMM(HMM_model, i)[1,2]
}
counter=counter+1
}
entropyVec
save.image("~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Lab2/Lab2.RData")
simulation
View(filtered)
timestep101=filtered[,100]%*%transitionMatrix
View(timestep101)
View(filtered)
View(transitionMatrix)
filtered[,100]
timestep101=transitionMatrix%*%filtered[,100]
timestep101
filtered[,100]
View(filtered)
View(transitionMatrix)
View(filteredMatrix)
View(filtered)
View(filteredMatrix)
View(filtered)
timestep101=filtered[,100]%*%transitionMatrix
mostProb_smoothed=apply(smoothed, 2, which.max)
mostProb_smoothed
mostProbPath
plot(density(accMatrix[,1]), col="red", xlab="Accuracy", ylim=c(0,10))
lines(density(accMatrix[,2]), col="blue")
lines(density(accMatrix[,3]), col="black")
plot(density(accMatrix[,1]), col="red", xlab="Accuracy", ylim=c(0,10))
lines(density(accMatrix[,2]), col="blue")
lines(density(accMatrix[,3]), col="black")
legend("topleft", box.lty = 1, legend = c("Most probable path","Filtered","Smoothed"),
col=c("red","blue","black"), lwd = 2)
accMatrix=matrix(0,1000, 3)
for (i in 1:1000) {
accMatrix[i,]=simulationHMM(HMM_model, 100)
}
debugSource('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Lab2/Lab2.R', echo=TRUE)
debugSource('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Lab2/Lab2.R', echo=TRUE)
debugSource('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Lab2/Lab2.R', echo=TRUE)
setwd("~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Lab2")
#install.packages("HMM")
#install.packages("entropy")
set.seed(12345)
debugSource('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Lab2/Lab2.R', echo=TRUE)
#install.packages("HMM")
#install.packages("entropy")
set.seed(12345)
library(HMM)
library(entropy)
transitionMatrix=diag(0.5, 10)
diag(transitionMatrix[,-1])=0.5
transitionMatrix[10,1]=0.5
emissionMatrix=matrix(0,10,10)
for(i in 1:10) {
for (j in 1:10) {
if((j+7-i) %% 10 >= 5) {
emissionMatrix[i,j]=0.2
} else {
emissionMatrix[i,j]=0
}
}
}
emissionMatrix
source('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Lab2/Lab2.R', echo=TRUE)
source('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Lab2/Lab2.R', echo=TRUE)
plot(density(accMatrix[,1]), col="red", xlab="Accuracy", ylim=c(0,10), main="Accuracy for HMM")
lines(density(accMatrix[,2]), col="blue")
lines(density(accMatrix[,3]), col="black")
legend("topleft", box.lty = 1, legend = c("Most probable path","Filtered","Smoothed"),
col=c("red","blue","black"), lwd = 2)
timestep101
source('~/SKOLA/LIU/Åk 5/TDDE15/TDDE15_Labs/Lab2/Lab2.R', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
set.seed(12345)
library(HMM)
library(entropy)
transitionMatrix=diag(0.5, 10)
diag(transitionMatrix[,-1])=0.5
transitionMatrix[10,1]=0.5
emissionMatrix=matrix(0,10,10)
for(i in 1:10) {
for (j in 1:10) {
if((j+7-i) %% 10 >= 5) {
emissionMatrix[i,j]=0.2
} else {
emissionMatrix[i,j]=0
}
}
}
emissionMatrix
states=1:10
symbols=1:10
HMM_model=initHMM(States=states, Symbols=symbols, transProbs=transitionMatrix, emissionProbs=emissionMatrix)
HMM_model
knitr::opts_chunk$set(echo = TRUE)
set.seed(12345)
library(HMM)
library(entropy)
transitionMatrix=diag(0.5, 10)
diag(transitionMatrix[,-1])=0.5
transitionMatrix[10,1]=0.5
emissionMatrix=matrix(0,10,10)
for(i in 1:10) {
for (j in 1:10) {
if((j+7-i) %% 10 >= 5) {
emissionMatrix[i,j]=0.2
} else {
emissionMatrix[i,j]=0
}
}
}
emissionMatrix
states=1:10
symbols=1:10
HMM_model=initHMM(States=states, Symbols=symbols, transProbs=transitionMatrix, emissionProbs=emissionMatrix)
HMM_model
simulation=simHMM(HMM_model, length=100)
obsStates=simulation$observation
alpha=exp(forward(HMM_model, obsStates))
beta=exp(backward(HMM_model, obsStates))
calcFiltering = function(HMM, alpha, noSim) {
filtered = matrix(0,10,noSim)
for (i in 1:noSim) {
filtered[,i]=alpha[,i]/sum(alpha[,i])
}
return(filtered)
}
calcSmoothing = function(HMM, alpha, beta, noSim) {
smoothed=matrix(0,10,noSim)
alphabeta=alpha*beta
for (i in 1:noSim) {
smoothed[,i]=alphabeta[,i]/sum(alphabeta[,i])
}
return(smoothed)
}
filtered=calcFiltering(HMM_model, alpha, 100)
smoothed=calcSmoothing(HMM_model, alpha, beta, 100)
posterior=posterior(HMM_model, obsStates)
mostProbPath=viterbi(HMM_model, obsStates)
mostProbPath
acc_mostProb
acc_filtered
acc_smoothed
timestep101=filtered[,100]%*%transitionMatrix
timestep101
